{"version":3,"sources":["consts.tsx","Data/DataFunctions.tsx","Data/StoryFunctions.tsx","MainApp/Intro.tsx","MainApp/Legend.tsx","MainApp/SideBar.tsx","MainApp/CustomAxis.tsx","MainApp/Graph.tsx","MainApp/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResidentialColor","SMEColor","LargeColor","Line2020Color","Line2019Color","BaseColor","StepList","StepOrder","0","1","2","3","StoryLims","StepTranslations","MonthMap","January","February","March","April","May","June","July","August","September","October","November","December","setFunction","a","csv","process","then","data","tmpData","forEach","item","currentItem","Year","Month","Date","YoYChange","push","catch","err","Market","Region","Consumption","getStepNumber","CurrentMode","tempNo","Object","keys","find","key","StoryToolTipText","storyStep","setting","marketFilter","BubbleDirection","mkFilter","DirectionalHint","topRightEdge","topLeftEdge","bottomAutoEdge","bottomRightEdge","topCenter","leftCenter","bottomCenter","bottomLeftEdge","AnchorPost","l","t","position","left","top","Intro","style","height","width","display","flexDirection","dangerouslySetInnerHTML","__html","CustomLegend","props","legendScale","scaleOrdinal","domain","range","legendIcon","color","label","includes","x1","y1","x2","y2","stroke","stroke-dasharray","htmlColor","fontSize","currStep","marketsActive","Card","zIndex","right","scale","labelFormat","labels","map","i","LegendItem","margin","value","text","LegendLabel","align","Button","variant","onClick","e","updateFilters","marginTop","SideBar","useState","activeStep","setActiveStep","steps","useEffect","Group","id","Stepper","orientation","index","Step","cursor","StepLabel","chosenLabel","updateStep","Typography","Divider","tickLabelSize","TwoYearAxis","graphHeight","leftPad","graphWidth","xScale","yScale","yAxisLabel","AxisBottom","numTicks","tickFormat","d","tickColor","axisCenter","axisToPoint","x","axisFromPoint","className","Line","from","to","ticks","tick","tickX","tickY","y","transform","textAnchor","fill","moment","formattedValue","format","scaleBand","hideAxisLine","AxisLeft","OneYearAxis","tooltipText","currMonth","Tooltip","title","monthTicks","scaleTime","nice","hideTicks","MainGraph","undefined","setxScale","setyScale","CurrentStep","SetCurrentStep","setyLabel","RawConsumption","SetRawConsumption","RawConsumptionMarkets","SetRawConsumptionMarkets","YoYData","SetYoYData","YoYMarketData","SetYoYMarketData","YoYRegionData","SetYoYRegionData","YoYMarketRegionData","SetYoYMarketRegionData","ActiveFilters","SetFilters","canvasHeight","document","documentElement","clientHeight","canvasWidth","clientWidth","setStoryStep","CurrStoryLimit","SetStorylim","ChartTitle","setTitle","PointOne","React","useRef","useBoolean","isCoachmark1Visible","hideCoachmark1","setFalse","showCoachmark1","setTrue","PointTwo","isCoachmark2Visible","hideCoachmark2","showCoachmark2","PointThree","isCoachmark3Visible","hideCoachmark3","showCoachmark3","handleStep","setStepandScale","getTTPos","s","directionalHint","doNotLayer","newFilter","reset","detTitle","activateMTFilter","setDateValueScale","minDate","maxDate","minVal","maxVal","scaleLinear","newStep","Math","min","valueOf","max","length","console","log","getRawYearData","getRawYearMarketsData","getYoYTotalData","getYoYMarketData","getYoYRegionData","getYoYMarketRegionData","xAxisSlide","visible","WebkitTransform","visibility","lineOpacity","Grid","container","ref","Coachmark","target","current","positioningContainerProps","delayBeforeCoachmarkAnimation","TeachingBubbleContent","onDismiss","hasCloseButton","xs","borderRight","alignItems","GridRows","GridColumns","motionVar","spring","LinePath","curve","curveCardinal","strokeWidth","filter","opacity","strokeDasharray","Fab","bottom","NavBar","AppBar","marginBottom","Toolbar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.490b2760.chunk.js","sourcesContent":["// Colors        https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=8\r\nexport const ResidentialColor: string = \"#1f78b4\"; //2\r\nexport const SMEColor: string = \"#b2df8a\"; //3\r\nexport const LargeColor: string = \"#fb9a99\"; //6\r\nexport const InactiveColor: string = '#111';\r\nexport const GraphBackgroundColor: string = '#f3f3f3';\r\nexport const BaseLineColor: string = \"#000000\"\r\nexport const GraphLineColor: string = \"#e0e0e0\"\r\nexport const Line2020Color: string = \"#A62190\";\r\nexport const Line2019Color: string = \"#4760DE\";\r\nexport const AnnotationLineColor: string = \"#cc5f43\";\r\nexport const AnnotationFillColor: string = \"#5ba966\";\r\nexport const BaseColor: string = \"#000000\";\r\nexport const ThemeColor: string = \"#3f51b5\"\r\n\r\n\r\nexport type MarketType = 'Residential' | 'Commercial' | 'Large';\r\nexport type Regions = \"Regional\" | \"Metropolitan\";\r\nexport type DataFilters = \"Markets\" | \"2019\"\r\n\r\n\r\nexport type SettingChoices = \"YoYTotal\" | \"YoYMarketRegion\" | \"Intro\" | \"RawYearComparison\"\r\nexport const StepList: SettingChoices[] = [\"Intro\", \"RawYearComparison\", \"YoYTotal\", \"YoYMarketRegion\"]\r\nexport const StepOrder: { [key: number]: SettingChoices } = {\r\n    0: \"Intro\",\r\n    1: \"RawYearComparison\",\r\n    2: \"YoYTotal\",\r\n    3: \"YoYMarketRegion\"\r\n}\r\nexport const StoryLims = {\r\n    \"Intro\": 3,\r\n    \"RawYearComparison\": 2,\r\n    \"YoYTotal\": 3,\r\n    \"YoYMarketRegion\": 2\r\n}\r\nexport const StepTranslations = { \"Intro\": \"Introduction\", \"RawYearComparison\": \"Consumption Between Years\", \"YoYTotal\": \"Year on Year Change\", \"YoYMarketRegion\": \"Regional Changes\", \"YoYMarket\": \"Market Type Changes\" }\r\n\r\n\r\n\r\nexport type Month = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\"\r\nexport const MonthMap = {\r\n    January: 0,\r\n    February: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    November: 10,\r\n    December: 11\r\n};","import { csv } from \"d3\";\r\nimport { Month, MonthMap } from \"../consts\";\r\nimport { RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from \"./DataTypes\";\r\n\r\nexport async function getYoYTotalData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYTotal.csv`).then(function (data: any): void {\r\n        let tmpData: YoYTotal[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYTotal = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"ConsumptionYoY\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarket[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarket = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegion.csv`).then(function (data: any): void {\r\n        let tmpData: YoYRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegionMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarketRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarketRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumption.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearComparison[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearComparison = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearMarketsData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumptionMarkets.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearMarkets[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearMarkets = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}","import { DirectionalHint } from \"@fluentui/react\";\r\nimport { CSSProperties } from \"react\";\r\nimport { SettingChoices, StepOrder } from \"../consts\";\r\n\r\nexport function getStepNumber(CurrentMode: SettingChoices): number {\r\n    let tempNo: number = Object.keys(StepOrder).find((key: any) => StepOrder[key] === CurrentMode) as unknown as number;\r\n    let stepNo = 1;\r\n    if (tempNo) {\r\n        stepNo = +tempNo\r\n        return stepNo\r\n    }\r\n    else {\r\n        return 1\r\n    }\r\n}\r\n\r\nexport function StoryToolTipText(storyStep: number, setting: SettingChoices, marketFilter: boolean): string {\r\n    if (setting === \"YoYTotal\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"All three markets were mostly moving in sync prior to COVID lockdowns.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Statewide restrictions saw most businesses and factories close, and there is a shift to working and schooling from home where possible\")\r\n            }\r\n            else if (storyStep === 3) {\r\n                return (\"The markets reached parity with each other again two months after strict lockdown rules ended.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"At an aggregated network level there is a net decrease of around -4% across the year. This is a significant change in the context of electricity demand. especially as 2020 was colder than 2019.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"The first lockdown saw an extreme trough in April, while the second lockdown sees a similar lockdown in August.\")\r\n            }\r\n            else if (storyStep === 3) {\r\n                return (\"We can see slow returns to normal as restrictions ease over time in contrast to their sudden implementation\")\r\n            }\r\n        }\r\n\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"During the first lockdown the similar restrictions between regions saw the different market types following similar growth or decline.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"During the second lockdown regional businesses remained open unlike their metropolitan counterparts. Tourism however was virtually non-existant during this period in Regional Victoria.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"Lockdown restrictions saw Victoria split into two distinct regions with differing rules.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Regional Victoria had significantly fewer restrictions during Lockdown 2.\")\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"RawYearComparison\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"From this we can see that Residential consumption is far more sensitive to temperature than business or industrial consumption. The latter two market types remain relativley stable throughout the year.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"It's a little tough to interpret the change between 2019 and 2020 when viewed like this. Let's look only at the difference between the years on the next visual.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"In a typical year Victoria generates approximately 26 million Megawatt-Hours (MWh) of electricity.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Generation is distributed across the year with peaks occuring during the hottest and coldest months.\")\r\n            }\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport function IntroStoryTitle(storyStep: number, setting: SettingChoices) {\r\n    return (`Test Title ${String.fromCodePoint(0x1F354)}`)\r\n}\r\n\r\nexport function BubbleDirection(setting: SettingChoices, storyStep: number, mkFilter: boolean) {\r\n    if (setting === \"RawYearComparison\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.bottomAutoEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomRightEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topLeftEdge\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomCenter\r\n            }\r\n            else if (storyStep === 3) {\r\n                return DirectionalHint.bottomLeftEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 3) {\r\n                return DirectionalHint.leftCenter\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topLeftEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomLeftEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n        }\r\n    }\r\n    return DirectionalHint.topCenter\r\n}\r\n\r\nexport function AnchorPost(setting: SettingChoices, storyStep: number, mkFilter: boolean): CSSProperties {\r\n    let l: string = \"70%\";\r\n    let t: string = \"50%\";\r\n    if (setting === \"RawYearComparison\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"34%\";\r\n                t = \"41%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"68%\";\r\n                t = \"47%\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"34%\";\r\n                t = \"57%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"74%\";\r\n                t = \"59%\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"31%\";\r\n                t = \"52%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"36%\";\r\n                t = \"65%\";\r\n            }\r\n            else if (storyStep === 3) {\r\n                l = \"77%\";\r\n                t = \"64%\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30%\";\r\n                t = \"51%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"40%\";\r\n                t = \"66%\";\r\n            }\r\n            else if (storyStep === 3) {\r\n                l = \"85%\";\r\n                t = \"57%\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30%\";\r\n                t = \"47%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"75%\";\r\n                t = \"65%\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30%\";\r\n                t = \"46%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"75%\";\r\n                t = \"59%\";\r\n            }\r\n        }\r\n    }\r\n    return ({ position: \"absolute\", left: l, top: t })\r\n}","\r\nexport function Intro() {\r\n    return (\r\n        <div style={{ height: \"90vh\", width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <div dangerouslySetInnerHTML={{ __html: \"<iframe src='https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1n-8-FkqEqL-hZbaXNfr5ApCmQKAhRsdSjKSMdV5JNKQ&font=Default&lang=en&timenav_position=top&initial_zoom=1&height=650' width='100%' height='650' webkitallowfullscreen mozallowfullscreen allowfullscreen frameborder='0'></iframe>\"}} />\r\n        </div>\r\n    )\r\n}\r\n","import { Button, Card } from \"@material-ui/core\";\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport { LegendItem, LegendLabel, LegendOrdinal } from '@visx/legend';\r\nimport { scaleOrdinal } from \"@visx/scale\";\r\nimport React from \"react\";\r\nimport { LargeColor, ResidentialColor, SettingChoices, SMEColor } from \"../consts\";\r\n\r\nexport function CustomLegend(props: { currStep: SettingChoices, marketsActive: boolean, updateFilters: Function }) {\r\n    function legendScale(setting: SettingChoices): any {\r\n        if (setting === \"RawYearComparison\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYTotal\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential Metropolitan\", \"Residential Regional\", \"Business Metropolitan\", \"Business Regional\", \"Industrial Metropolitan\", \"Industrial Regional\"],\r\n                    range: [ResidentialColor, ResidentialColor, SMEColor, SMEColor, LargeColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    function legendIcon(setting: SettingChoices, color: string, label: string, lineDash = false) {\r\n        if (setting === \"YoYTotal\" || setting === \"RawYearComparison\") {\r\n            if (label === \"Residential\") { return (<HomeIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Business\") { return (<StoreIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Industrial\") { return (<BusinessIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Overall\") { return (<MoreHorizIcon htmlColor={color} fontSize={'large'} />) }\r\n        }\r\n        else {\r\n            if (label.includes(\"Regional\")) {\r\n                return (<svg width={25} height={25}> <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" stroke={color} stroke-dasharray=\"4\" /> </svg>)\r\n            }\r\n            else {\r\n                return (<svg width={25} height={25}> <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" stroke={color} /> </svg>)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    if (!legendScale(props.currStep) || props.currStep === \"Intro\") {\r\n        return null;\r\n    }\r\n    else if (!props.marketsActive) {\r\n        return (\r\n            <Card style={{ zIndex: 1, position: 'fixed', top: \"15vh\", right: \"10vw\" }}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { props.updateFilters() }} style={{ marginTop: \"5%\" }}> Show Market Types </Button>\r\n            </Card>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Card style={{ zIndex: 1, position: 'fixed', top: \"15vh\", right: \"10vw\" }}>\r\n                <LegendOrdinal scale={legendScale(props.currStep)} labelFormat={(label: any) => `${label}`}>\r\n                    {labels => (\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {labels.map((label, i) => (\r\n                                <LegendItem key={`legend-quantile-${i}`} margin=\"5px 5px\" >\r\n                                    {legendIcon(props.currStep, label.value, label.text)}\r\n                                    <LegendLabel align=\"left\" margin=\"0 0 0 4px\"> {label.text} </LegendLabel>\r\n                                </LegendItem>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </LegendOrdinal>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n","import { Divider } from '@material-ui/core';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Group } from '@visx/group';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingChoices, StepList, StepTranslations } from '../consts';\r\nimport { getStepNumber } from '../Data/StoryFunctions';\r\n\r\nexport default function SideBar(props: { currStep: SettingChoices, updateStep: Function, updateFilters: Function }) {\r\n    const [activeStep, setActiveStep] = useState<SettingChoices>(props.currStep);\r\n    const steps = StepList;\r\n\r\n    useEffect(() => {\r\n        if (props.currStep !== activeStep) {\r\n            setActiveStep(props.currStep);\r\n        }\r\n    })\r\n\r\n    const handleClick: any = (chosenLabel: SettingChoices) => {\r\n        setActiveStep(chosenLabel)\r\n        props.updateStep(chosenLabel);\r\n    }\r\n\r\n\r\n    return (\r\n        <Group id=\"SideBar\" style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <Group id=\"Stepper\">\r\n                <Stepper activeStep={getStepNumber(activeStep)} orientation=\"vertical\">\r\n                    {steps.map((label, index) => (\r\n                        <Step key={label} style={{ cursor: \"pointer\" }}>\r\n                            <StepLabel onClick={(e) => { handleClick(label) }}><Typography variant=\"button\">{StepTranslations[label]}</Typography></StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n            </Group>\r\n            <Divider />\r\n        </Group>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { AxisBottom, AxisLeft, ComputedTick } from '@visx/axis';\r\nimport { Group } from \"@visx/group\";\r\nimport { Line } from \"@visx/shape\";\r\nimport moment from \"moment\";\r\nimport { scaleBand, scaleTime } from \"@visx/scale\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { BaseColor, Line2019Color, Line2020Color } from \"../consts\";\r\n\r\nconst tickLabelSize = 15;\r\n\r\nexport function TwoYearAxis(graphHeight: number, leftPad: number, graphWidth: number, xScale: any, yScale: any, yAxisLabel: string) {\r\n    return (\r\n        <>\r\n            <AxisBottom top={graphHeight} scale={xScale} numTicks={24} tickFormat={(d: any) => { return d }}>\r\n                {props => {\r\n                    const tickColor = props.label === \"2019\" ? '#4760DE' : \"#A62190\";\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            <Line from={props.axisFromPoint} to={props.axisToPoint} stroke={\"#000000\"} />\r\n                            {props.ticks.map((tick, i) => {\r\n                                const tickX = tick.to.x;\r\n                                const tickY = tick.to.y + tickLabelSize;\r\n                                return (\r\n                                    <Group key={`vx-tick-${tick.value}-${i}`} className={'vx-axis-tick'}>\r\n                                        <Line from={tick.from} to={tick.to} stroke={tickColor} />\r\n                                        <text transform={`translate(${tickX}, ${tickY})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={moment(tick.formattedValue).format(\"Y\") === \"2019\" ? '#4760DE' : \"#A62190\"} >\r\n                                            {moment(tick.formattedValue).format(\"MMM\")}\r\n                                        </text>\r\n                                    </Group>\r\n                                );\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n            <AxisBottom top={graphHeight + 30} scale={scaleBand({ domain: [\"2019\", \"2020\"], range: [leftPad, graphWidth] })} numTicks={4} hideAxisLine tickFormat={(d: any) => { return moment(d).format(\"Y\") }} >\r\n                {props => {\r\n                    const tickLabelSize = 10;\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            {props.ticks.map((tick, i) => {\r\n                                const tickX = tick.to.x;\r\n                                const tickY = tick.to.y + tickLabelSize;\r\n                                return (\r\n                                    <Group key={`vx-tick-${tick.value}-${i}`} className={'vx-axis-tick'}>\r\n                                        <text transform={`translate(${tickX}, ${tickY})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={tick.formattedValue === \"2019\" ? Line2019Color : Line2020Color} >\r\n                                            {tick.formattedValue}\r\n                                        </text>\r\n                                    </Group>\r\n                                );\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n\r\n            <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport function OneYearAxis(graphHeight: number, leftPad: number, graphWidth: number, xScale: any, yScale: any, yAxisLabel: string) {\r\n    return (\r\n        <>\r\n            <AxisBottom top={graphHeight} scale={xScale} numTicks={12} tickFormat={(d: any) => { return d }} >\r\n                {props => {\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            <Line from={props.axisFromPoint} to={props.axisToPoint} stroke={\"#000000\"} />\r\n                            {props.ticks.map((tick, i) => {\r\n                                return monthTicks(tick)\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n            <AxisBottom top={graphHeight + 30} scale={scaleTime<number>({ domain: [new Date(\"2019-01-01\"), new Date(\"2020-12-01\")], nice: true, range: [leftPad, graphWidth] })} numTicks={1} hideAxisLine tickFormat={(d: any) => { return moment(d).format(\"Y\") }} hideTicks />\r\n\r\n            <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction monthTicks(tick: ComputedTick<any>) {\r\n    let tooltipText = \"Prior to Lockdown\"\r\n    let tickColor = BaseColor\r\n\r\n    let currMonth = moment(tick.formattedValue).format(\"MMMM\")\r\n    if ([\"April\", \"May\"].includes(currMonth)) {\r\n        tooltipText = \"Lockdown 1\"\r\n        tickColor = Line2019Color\r\n    }\r\n    else if ([\"July\", \"August\", \"September\", \"October\"].includes(currMonth)) {\r\n        tooltipText = \"Lockdown 2\"\r\n        tickColor = Line2020Color\r\n    }\r\n    else if ([\"January\", \"February\"].includes(currMonth)) {\r\n        tooltipText = \"Prior to Lockdown\"\r\n        tickColor = BaseColor\r\n    }\r\n    else if (currMonth === \"March\") {\r\n        tooltipText = \"Lockdown begins in Third Week\"\r\n        tickColor = Line2019Color\r\n    }\r\n    else if (currMonth === \"June\") {\r\n        tooltipText = \"Eased Restrictions\"\r\n        tickColor = BaseColor\r\n    }\r\n    else if ([\"November\", \"December\"].includes(currMonth)) {\r\n        tooltipText = \"Easing Restrictions Over Time\"\r\n        tickColor = BaseColor\r\n    }\r\n\r\n    return (\r\n        <Group key={`vx-tick-${tick.value}`}>\r\n            <Line from={tick.from} to={tick.to} stroke={\"#A62190\"} />\r\n            <Tooltip title={tooltipText}>\r\n                <text transform={`translate(${tick.to.x}, ${tick.to.y + tickLabelSize})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={tickColor} cursor={'pointer'}>\r\n                    {moment(tick.formattedValue).format(\"MMMM\")}\r\n                </text>\r\n            </Tooltip>\r\n        </Group>\r\n    );\r\n}","import { Coachmark, DirectionalHint, TeachingBubbleContent } from '@fluentui/react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { Fab, Grid, Tooltip, Typography } from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport { AxisBottom, AxisLeft } from '@visx/axis';\r\nimport { curveCardinal } from '@visx/curve';\r\nimport { Group } from '@visx/group';\r\nimport { scaleLinear, scaleTime } from '@visx/scale';\r\nimport { Line, LinePath } from '@visx/shape';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Motion, spring } from 'react-motion';\r\nimport { BaseColor, DataFilters, LargeColor, ResidentialColor, SettingChoices, SMEColor, StepOrder, StoryLims } from \"../consts\";\r\nimport { getRawYearData, getRawYearMarketsData, getYoYMarketData, getYoYMarketRegionData, getYoYRegionData, getYoYTotalData } from '../Data/DataFunctions';\r\nimport { RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from '../Data/DataTypes';\r\nimport { AnchorPost, BubbleDirection, getStepNumber, StoryToolTipText } from '../Data/StoryFunctions';\r\nimport '../styles.css';\r\nimport { Intro } from './Intro';\r\nimport { CustomLegend } from './Legend';\r\nimport SideBar from './SideBar';\r\nimport moment from 'moment';\r\nimport { scaleBand } from '@visx/scale';\r\nimport { TwoYearAxis, OneYearAxis } from './CustomAxis';\r\nimport { GridRows, GridColumns } from '@visx/grid';\r\n\r\n\r\nexport function MainGraph() {\r\n    const [xScale, setxScale] = useState<any>(undefined)\r\n    const [yScale, setyScale] = useState<any>(undefined)\r\n    const [CurrentStep, SetCurrentStep] = useState<SettingChoices>(\"YoYTotal\")\r\n    const [xAxisLabel, setxLabel] = useState<string>(\"\")\r\n    const [yAxisLabel, setyLabel] = useState<string>(\"\")\r\n\r\n    const [RawConsumption, SetRawConsumption] = useState<RawYearComparison[]>([])\r\n    const [RawConsumptionMarkets, SetRawConsumptionMarkets] = useState<RawYearMarkets[]>([])\r\n    const [YoYData, SetYoYData] = useState<YoYTotal[]>([])\r\n    const [YoYMarketData, SetYoYMarketData] = useState<YoYMarket[]>([])\r\n    const [YoYRegionData, SetYoYRegionData] = useState<YoYRegion[]>([])\r\n    const [YoYMarketRegionData, SetYoYMarketRegionData] = useState<YoYMarketRegion[]>([])\r\n\r\n    const [ActiveFilters, SetFilters] = useState<DataFilters[]>([])\r\n\r\n    const canvasHeight = document.documentElement.clientHeight * 0.90;\r\n    const canvasWidth = document.documentElement.clientWidth * 0.80;\r\n    const graphHeight = document.documentElement.clientHeight * 0.80;\r\n    const graphWidth = document.documentElement.clientWidth * 0.75;\r\n    const leftPad = document.documentElement.clientWidth * 0.05;\r\n\r\n    //Story Variables\r\n    const [storyStep, setStoryStep] = useState<number>(1)\r\n    const [CurrStoryLimit, SetStorylim] = useState<number>(StoryLims[\"Intro\"])\r\n    const [ChartTitle, setTitle] = useState<string>(\"Total Consumption\")\r\n\r\n    // Ref targets\r\n    const PointOne = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark1Visible, { setFalse: hideCoachmark1, setTrue: showCoachmark1 }] = useBoolean(false);\r\n    const PointTwo = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark2Visible, { setFalse: hideCoachmark2, setTrue: showCoachmark2 }] = useBoolean(false);\r\n    const PointThree = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark3Visible, { setFalse: hideCoachmark3, setTrue: showCoachmark3 }] = useBoolean(false);\r\n\r\n    // Step Functions\r\n    function handleStep() {\r\n        if (CurrentStep !== \"YoYMarketRegion\") {\r\n            setStepandScale(StepOrder[getStepNumber(CurrentStep) + 1])\r\n        }\r\n    }\r\n\r\n    // Tooltip positioning\r\n    function getTTPos(s: number) {\r\n        return (\r\n            {\r\n                directionalHint: BubbleDirection(CurrentStep, s, ActiveFilters.includes(\"Markets\")),\r\n                doNotLayer: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    // Set Filters\r\n    function updateFilters(newFilter: DataFilters, reset = false) {\r\n        if (reset) {\r\n            SetFilters([])\r\n        }\r\n        else {\r\n            SetFilters([newFilter])\r\n            setTitle(detTitle(CurrentStep, true))\r\n        }\r\n    }\r\n\r\n    function activateMTFilter() {\r\n        hideCoachmark1()\r\n        hideCoachmark2()\r\n        hideCoachmark3()\r\n        updateFilters(\"Markets\")\r\n    }\r\n\r\n    // Axis Functions\r\n    function setDateValueScale(minDate: number, maxDate: number, minVal: number, maxVal: number) {\r\n        setxScale(() => scaleTime<number>({ domain: [minDate, maxDate], nice: true, range: [leftPad, graphWidth] }))\r\n        setyScale(() => scaleLinear<number>({ domain: [maxVal, minVal], nice: true, range: [50, graphHeight] }))\r\n    }\r\n\r\n    function setStepandScale(newStep: SettingChoices) {\r\n        SetCurrentStep(newStep);\r\n        hideCoachmark1();\r\n        hideCoachmark2();\r\n        hideCoachmark3();\r\n        updateFilters(\"2019\", false)\r\n        setTitle(detTitle(newStep))\r\n        SetStorylim(StoryLims[newStep])\r\n        if (newStep === \"RawYearComparison\") {\r\n            let minDate = Math.min(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...RawConsumption.map((d) => { return d.Consumption }))\r\n            let maxVal = Math.max(...RawConsumption.map((d) => { return d.Consumption }))\r\n            setDateValueScale(minDate, maxDate, 0, maxVal)\r\n            setyLabel(\"Demand (MWh)\")\r\n        }\r\n        else if (newStep === \"YoYTotal\") {\r\n            let minDate = Math.min(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n            setyLabel(\"Year on Year Change (%)\")\r\n        }\r\n        else if (newStep === \"YoYMarketRegion\") {\r\n            let minDate = Math.min(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            setyLabel(\"Year on Year Change (%)\")\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n        }\r\n        else if (newStep === \"Intro\") {\r\n\r\n        }\r\n        if (newStep !== CurrentStep) {\r\n            setStoryStep(1);\r\n        }\r\n    }\r\n\r\n    function detTitle(setting: SettingChoices, marketFilter = false): string {\r\n        if (setting === \"YoYTotal\") {\r\n            if (marketFilter) {\r\n                return \"Electricity Demand across Victoria by Market Type\"\r\n            }\r\n            else {\r\n                return \"Electricity Demand across Victoria\"\r\n            }\r\n        }\r\n        else if (setting === \"RawYearComparison\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Market Type\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand\"\r\n            }\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Region\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand by Region and Market Type\"\r\n            }\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (RawConsumption.length === 0) {\r\n            console.log(\"Loading Data\")\r\n            getRawYearData(SetRawConsumption);\r\n            getRawYearMarketsData(SetRawConsumptionMarkets);\r\n            getYoYTotalData(SetYoYData);\r\n            getYoYMarketData(SetYoYMarketData)\r\n            getYoYRegionData(SetYoYRegionData)\r\n            getYoYMarketRegionData(SetYoYMarketRegionData)\r\n        }\r\n        else if (xScale === undefined && storyStep === 1 && CurrentStep !== \"Intro\") {\r\n            console.log(\"Data Loaded\")\r\n            setStepandScale(\"Intro\")\r\n        }\r\n\r\n        if (!isCoachmark1Visible) {\r\n            showCoachmark1()\r\n            showCoachmark2()\r\n            showCoachmark3()\r\n        }\r\n    })\r\n\r\n    let xAxisSlide: any = (x: number, visible: boolean) => {\r\n        return (\r\n            {\r\n                WebkitTransform: `translate3d(${x}px, 0, 0)`,\r\n                transform: `translate3d(${x}px, 0, 0)`,\r\n                visibility: (visible ? 'visible' : 'hidden')\r\n            }\r\n        )\r\n    }\r\n\r\n    const leftColStyle = {\r\n        borderRight: '1px solid rgba(0, 0, 0, 0.05)'\r\n    }\r\n\r\n    const lineOpacity = ActiveFilters.includes(\"Markets\") ? 0 : 1\r\n\r\n    return (\r\n        <Grid container>\r\n            <Group id=\"anchors\">\r\n                <span id=\"InfoAnchor1\" style={AnchorPost(CurrentStep, 1, ActiveFilters.includes(\"Markets\"))} ref={PointOne} />\r\n                <span id=\"InfoAnchor2\" style={AnchorPost(CurrentStep, 2, ActiveFilters.includes(\"Markets\"))} ref={PointTwo} />\r\n                <span id=\"InfoAnchor3\" style={AnchorPost(CurrentStep, 3, ActiveFilters.includes(\"Markets\"))} ref={PointThree} />\r\n            </Group>\r\n\r\n            <Group id=\"LegendContainer\">\r\n                <CustomLegend currStep={CurrentStep} marketsActive={ActiveFilters.includes(\"Markets\")} updateFilters={activateMTFilter} />\r\n            </Group>\r\n\r\n            <Group id=\"infoBoxes\">\r\n                {(CurrentStep !== \"Intro\") && (\r\n                    <>\r\n                        {(CurrStoryLimit >= 1 && isCoachmark1Visible) && (\r\n                            <Coachmark target={PointOne.current} positioningContainerProps={getTTPos(1)} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark1} hasCloseButton>\r\n                                    {StoryToolTipText(1, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n\r\n                        {(CurrStoryLimit >= 2 && isCoachmark2Visible) && (\r\n                            <Coachmark target={PointTwo.current} positioningContainerProps={getTTPos(2)} delayBeforeCoachmarkAnimation={1000} >\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark2} hasCloseButton>\r\n                                    {StoryToolTipText(2, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                        {(CurrStoryLimit >= 3 && isCoachmark3Visible) && (\r\n                            <Coachmark target={PointThree.current} positioningContainerProps={getTTPos(3)} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark3} hasCloseButton>\r\n                                    {StoryToolTipText(3, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </Group>\r\n\r\n            <Grid item xs={2} style={leftColStyle}>\r\n                <SideBar currStep={CurrentStep} updateStep={setStepandScale} updateFilters={activateMTFilter} />\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n                {CurrentStep === \"Intro\" && <Intro />}\r\n\r\n                {(CurrentStep !== \"Intro\" && xScale) &&\r\n                    <Group id=\"CanvasContainer\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                        <Typography variant=\"h6\">{ChartTitle}</Typography>\r\n                        <svg height={canvasHeight} width={canvasWidth} id=\"Canvas\">\r\n\r\n                            <Group id=\"Axis\">\r\n                                {CurrentStep !== \"RawYearComparison\" ? OneYearAxis(graphHeight, leftPad, graphWidth, xScale, yScale, yAxisLabel) : TwoYearAxis(graphHeight, leftPad, graphWidth, xScale, yScale, yAxisLabel)}\r\n                                <GridRows scale={yScale} width={graphWidth-leftPad} height={graphHeight} stroke=\"#e0e0e0\" left={leftPad}/>\r\n                                <GridColumns scale={xScale} width={graphWidth} height={graphHeight-50} stroke=\"#e0e0e0\" top={50}/>\r\n                            </Group>\r\n\r\n                            {/* Total Consumption Lines */}\r\n                            <Group id={\"TotalConsumpion\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <LinePath\r\n                                            data={RawConsumption}\r\n                                            curve={curveCardinal}\r\n                                            x={d => xScale(d.Month.valueOf())}\r\n                                            y={d => yScale(d.Consumption)}\r\n                                            stroke={BaseColor}\r\n                                            strokeWidth={1.5}\r\n                                            style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\"))}\r\n                                            className={\"lineStyle\"}\r\n                                        />}\r\n                                </Motion>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"RawYearMarkets\">\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY & YoYMarket Lines */}\r\n                            <Group id={\"YoYChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group>\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))} />\r\n                                            <LinePath\r\n                                                data={YoYData}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeMarkets\">\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY Region and Yoy Market+Region Lines */}\r\n                            <Group id={\"YoYRegionChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeRegion\">\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))} />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Metropolitan\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoyChangeMarketRegions\">\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                        </svg>\r\n                    </Group>\r\n                }\r\n            </Grid>\r\n            <Group id=\"NavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', top: \"50%\", right: \"0%\" }}>\r\n                {(CurrentStep !== \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) &&\r\n                    <Fab color=\"primary\" onClick={(e) => handleStep()}>\r\n                        <NavigateNextIcon />\r\n                    </Fab>\r\n                }\r\n                {(CurrentStep !== \"YoYMarketRegion\" && CurrentStep !== \"Intro\" && !ActiveFilters.includes(\"Markets\")) &&\r\n                    <Tooltip title=\"Show Market Types to Continue\">\r\n                        <Fab onClick={(e) => activateMTFilter()}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                }\r\n            </Group>\r\n            <Group id=\"IntroNavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', bottom: \"0%\", right: \"0%\", flexDirection: 'column' }} className={\"introNavButton\"}>\r\n                {(CurrentStep === \"Intro\") &&\r\n                    <>\r\n                        <Fab color=\"primary\" onClick={(e) => handleStep()}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                        <Typography variant=\"button\">Next Visual</Typography>\r\n                    </>\r\n                }\r\n            </Group>\r\n        </Grid>\r\n    )\r\n}","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <AppBar position=\"static\" style={{ marginBottom: \"1vh\" }}>\r\n            <Toolbar>\r\n                <Typography variant=\"h5\">Visualising the Effects of COVID-19 on the Electricity Grid in Melbourne, Australia</Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport { MainGraph } from './MainApp/Graph';\nimport NavBar from './MainApp/NavBar';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <NavBar />\n      <MainGraph />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\ninitializeIcons()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
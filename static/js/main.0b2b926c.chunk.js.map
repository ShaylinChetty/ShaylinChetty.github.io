{"version":3,"sources":["Types/RawYearComparison.tsx","Types/TypesandConsts.tsx","Types/YoYMarketChange.tsx","Types/YoYMarketRegions.tsx","Types/YoYTotalChange.tsx","Visuals/Annotations.tsx","Visuals/Legend.tsx","Visuals/AllThingsCombined.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["monthlyConsumption","Value","Month","TrueYear","ResidentialColor","SMEColor","LargeColor","GraphLineColor","Line2020Color","Line2019Color","AnnotationLineColor","monthlyYoYMarketChange","monthlyYoYMarketRegions","monthlyYoYChange","CustomAnnotation","choice","xVal","yVal","xDelt","yDelt","subText","titleText","showHorLine","Annotation","x","y","dx","dy","Connector","stroke","type","Label","backgroundFill","showAnchorLine","anchorLineStroke","backgroundProps","fontColor","subtitle","title","width","LineSubject","orientation","min","max","CustomLegend","legendScale","setting","scaleOrdinal","domain","range","legendIcon","color","label","height","fill","htmlColor","fontSize","style","zIndex","position","top","right","scale","labelFormat","labels","display","flexDirection","map","i","LegendItem","margin","value","text","LegendLabel","align","DateValue","d","Date","valueOf","NumberValue","Number","displayCurrent","xAxisSlide","visible","WebkitTransform","transform","visibility","dashedSlide","strokeDasharray","anchorStyle","bottom","ToolTipGraph","props","useState","CurrentData","setCurrentData","CurrentSetting","setCurrentSetting","SelectedRegion","scaleTime","left","xScale","setxScale","scaleLinear","nice","yScale","setyScale","allState","mainContainer","itemStyle","changeSetting","newSetting","Math","useEffect","window","onscroll","yPos","pageYOffset","xMax","yMax","baseLine","isYoYTotal","isMarket","isMarketRegion","isIntro","isRawYear","onScroll","console","log","justifyContent","motionVar","spring","opacity","Paper","rx","Group","GridRows","GridColumns","x1","x2","y1","y2","AxisBottom","AxisLeft","id","LinePath","data","filter","curve","curveCardinal","strokeWidth","Threshold","random","y0","clipAboveTo","clipBelowTo","curveBasis","belowAreaProps","fillOpacity","aboveAreaProps","strokeOpacity","MarketType","Region","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"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","file":"static/js/main.0b2b926c.chunk.js","sourcesContent":["import { YoYTotalChange } from \"./YoYTotalChange\";\r\n\r\n\r\nexport interface RawYearComparison extends YoYTotalChange {\r\n    TrueYear: Number\r\n}\r\n\r\nexport const monthlyConsumption: RawYearComparison[] = [\r\n    {\r\n        Value: 3139713.015,\r\n        Month: \"2020-01-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2703673.138,\r\n        Month: \"2020-02-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2931916.542,\r\n        Month: \"2020-03-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2643146.898,\r\n        Month: \"2020-04-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 3015223.6,\r\n        Month: \"2020-05-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 3130085.045,\r\n        Month: \"2020-06-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 3269603.167,\r\n        Month: \"2020-07-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 3287910.074,\r\n        Month: \"2020-08-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2865819.915,\r\n        Month: \"2020-09-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2831559.572,\r\n        Month: \"2020-10-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2694935.893,\r\n        Month: \"2020-11-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2820949.898,\r\n        Month: \"2020-12-01\",\r\n        TrueYear: 2019\r\n    },\r\n    {\r\n        Value: 2871406.753,\r\n        Month: \"2020-01-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2701811.023,\r\n        Month: \"2020-02-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2716992.095,\r\n        Month: \"2020-03-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2571293.921,\r\n        Month: \"2020-04-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2955386.4,\r\n        Month: \"2020-05-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 3084289.452,\r\n        Month: \"2020-06-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 3271542.551,\r\n        Month: \"2020-07-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 3106422.047,\r\n        Month: \"2020-08-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2664678.297,\r\n        Month: \"2020-09-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2661744.994,\r\n        Month: \"2020-10-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2662331.99,\r\n        Month: \"2020-11-01\",\r\n        TrueYear: 2020\r\n    },\r\n    {\r\n        Value: 2628654.002,\r\n        Month: \"2020-12-01\",\r\n        TrueYear: 2020\r\n    }\r\n]","export const ResidentialColor: string = \"#1f78b4\"; //2\r\nexport const SMEColor: string = \"#b2df8a\"; //3\r\nexport const LargeColor: string = \"#fb9a99\"; //6\r\nexport const InactiveColor: string = '#111';\r\nexport const GraphBackgroundColor: string = '#f3f3f3';\r\nexport const BaseLineColor: string = \"#000000\"\r\nexport const GraphLineColor: string = \"#e0e0e0\"\r\nexport const Line2020Color: string = \"#e31a1c\";\r\nexport const Line2019Color: string = \"#1f78b4\";\r\nexport const AnnotationLineColor: string = \"#cc5f43\";\r\nexport const AnnotationFillColor: string = \"#5ba966\";\r\n\r\n// https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=8\r\n\r\nexport type MarketType = 'Residential' | 'SME' | 'Large';\r\nexport type Regions = \"Regional\" | \"Metropolitan\";\r\nexport type SettingChoices = \"YoYTotal\" | \"YoYMarket\" | \"YoYMarketRegion\" | \"Intro\" | \"RawYearComparison\"\r\n\r\nexport const IntroText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur vestibulum, erat quis fringilla faucibus, nunc sapien ultricies mauris, vitae varius metus turpis tempus ligula. Phasellus justo tortor, sodales ut rhoncus luctus, ultrices et enim. Suspendisse ornare vestibulum est, a congue quam convallis non. Vestibulum scelerisque finibus fermentum. Suspendisse nibh nulla, convallis non nunc eu, ullamcorper varius leo. Nam consectetur, sem eget viverra vehicula, eros dui pharetra velit, nec consequat velit odio et sapien. Sed tortor odio, ultrices ac porta convallis, sagittis mattis arcu. Vivamus sollicitudin velit et tellus interdum, a malesuada mi tempor. Vivamus porta quis ex quis placerat. Suspendisse non tempus sem. Nulla tincidunt ante quis lacinia interdum. Fusce ut magna quis elit volutpat eleifend. In laoreet nunc eget vulputate dignissim. Aliquam erat volutpat. Nulla gravida cursus ex, eu consectetur risus pretium eu. Cras aliquet, sapien at maximus vulputate, odio diam consectetur augue, a porta arcu enim ac quam. Aenean id imperdiet velit, a egestas dui. Aliquam nisl diam, dapibus ultrices ultricies non, tincidunt eu justo. Aenean suscipit laoreet dolor. Maecenas nec enim dictum, imperdiet massa at, lacinia nisl. Suspendisse posuere purus eu turpis consectetur, id vulputate magna auctor. Pellentesque ut pellentesque risus. Cras cursus nec lacus sed porttitor. Nulla bibendum urna nulla, sit amet mollis lorem condimentum a. Aenean faucibus metus vel tortor efficitur, vel maximus lectus pharetra. Integer aliquam vulputate ex, nec pellentesque justo laoreet eget. Donec tempus vestibulum orci, a finibus nunc dictum et. Pellentesque vehicula diam ut ex commodo, sit amet dignissim eros mattis.\"","import { MarketType } from \"./TypesandConsts\";\r\nimport { YoYTotalChange } from \"./YoYTotalChange\";\r\n\r\nexport interface YoYMarketChange extends YoYTotalChange {\r\n    MarketType: MarketType\r\n}\r\n\r\nexport const monthlyYoYMarketChange: YoYMarketChange[] = [\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -6.46\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": -11.39\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -8.76\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": 1.29\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": -1.56\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -1.22\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -6.24\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": -6.9\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -10.82\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -10.39\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 18.76\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -18.26\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -13.3\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 20.19\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -15.72\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -8.44\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 8.87\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -7.75\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -8.72\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 14.28\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -10.23\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -11.84\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 8.79\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -21.65\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -9.92\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 2.5\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -18.51\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -11.02\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 9.14\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -18.12\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -2.33\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": 3.2\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -5.47\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Value\": -4.74\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Value\": -8.36\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Value\": -9.31\r\n  }\r\n ]","import { MarketType, Regions } from \"./TypesandConsts\"\r\nimport { YoYTotalChange } from \"./YoYTotalChange\"\r\n\r\nexport interface YoYMarketRegions extends YoYTotalChange {\r\n    MarketType: MarketType\r\n    Region: Regions\r\n}\r\n\r\nexport const monthlyYoYMarketRegions: YoYMarketRegions[] = [\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -5.95\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -7\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -9.46\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -12.85\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -5.71\r\n  },\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -11.74\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 1.03\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 1.56\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -2.37\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -0.9\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -0.29\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -2.21\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -7.7\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -4.68\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -6.92\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -6.88\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -11.04\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -10.58\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -11.62\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -9.1\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 20.64\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 17.28\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -20.36\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -16.01\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -13.31\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -13.3\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 22.19\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 18.61\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -18.89\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -12.12\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -8.54\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -8.33\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 9.54\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 8.34\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -10.16\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -5.06\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -9.41\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -7.97\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 14.97\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 13.73\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -14.54\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -5.28\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -14.44\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -9.05\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 8.36\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 9.14\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -26.79\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -15.83\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -12.34\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -7.36\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 2.19\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 2.74\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -23.95\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -12.5\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -14.12\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -7.71\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 9.81\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 8.6\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -23.41\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -12.25\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -5.81\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 1.3\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": 2.23\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": 3.98\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -9.95\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -0.58\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -8.05\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"Large\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -1.32\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -7.57\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"Residential\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -8.96\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Metropolitan\",\r\n    \"Value\": -11.06\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"MarketType\": \"SME\",\r\n    \"Region\": \"Regional\",\r\n    \"Value\": -7.57\r\n  }\r\n ]","export interface YoYTotalChange {\r\n  Month: string;\r\n  Value: Number;\r\n}\r\n\r\nexport const monthlyYoYChange: YoYTotalChange[] = [\r\n  {\r\n    \"Month\": \"2020-01-01\",\r\n    \"Value\": -8.55\r\n  },\r\n  {\r\n    \"Month\": \"2020-02-01\",\r\n    \"Value\": -0.07\r\n  },\r\n  {\r\n    \"Month\": \"2020-03-01\",\r\n    \"Value\": -7.33\r\n  },\r\n  {\r\n    \"Month\": \"2020-04-01\",\r\n    \"Value\": -2.72\r\n  },\r\n  {\r\n    \"Month\": \"2020-05-01\",\r\n    \"Value\": -1.98\r\n  },\r\n  {\r\n    \"Month\": \"2020-06-01\",\r\n    \"Value\": -1.46\r\n  },\r\n  {\r\n    \"Month\": \"2020-07-01\",\r\n    \"Value\": 0.06\r\n  },\r\n  {\r\n    \"Month\": \"2020-08-01\",\r\n    \"Value\": -5.52\r\n  },\r\n  {\r\n    \"Month\": \"2020-09-01\",\r\n    \"Value\": -7.02\r\n  },\r\n  {\r\n    \"Month\": \"2020-10-01\",\r\n    \"Value\": -6.00\r\n  },\r\n  {\r\n    \"Month\": \"2020-11-01\",\r\n    \"Value\": -1.21\r\n  },\r\n  {\r\n    \"Month\": \"2020-12-01\",\r\n    \"Value\": -6.82\r\n  }\r\n]","import { AnnotationFillColor, AnnotationLineColor, SettingChoices } from \"../Types/TypesandConsts\";\r\nimport { Annotation, Label, Connector, CircleSubject, LineSubject } from '@visx/annotation';\r\nimport React from \"react\";\r\n\r\n\r\nexport default function CustomAnnotation(choice: SettingChoices) {\r\n    let subjectCircle = false;\r\n    let xVal = 0;\r\n    let yVal = 0;\r\n    let xDelt = 0;\r\n    let yDelt = -0;\r\n    let subText = \"\";\r\n    let titleText = \"\";\r\n    let showHorLine = true;\r\n\r\n    if (choice === \"RawYearComparison\") {\r\n        xVal = 192;\r\n        yVal = 300;\r\n        xDelt = 100;\r\n        yDelt = -100;\r\n        subText = \"First complete lockdown of Victoria\";\r\n        titleText = \"March 2020\";\r\n        showHorLine = true;\r\n    }\r\n    else if (choice === \"YoYMarket\") {\r\n        xVal = 192;\r\n        yVal = 300;\r\n        xDelt = 100;\r\n        yDelt = -100;\r\n        subText = \"Splitting the different market segments shows a different story\";\r\n        titleText = \"Market Split\";\r\n        showHorLine = false;\r\n    }\r\n    else {\r\n        xVal = -1;\r\n    }\r\n\r\n    if (xVal > 0) {\r\n        return (\r\n            <Annotation x={xVal} y={yVal} dx={xDelt} dy={yDelt}>\r\n                {(showHorLine || subjectCircle) && <Connector stroke={AnnotationLineColor} type={\"elbow\"} />}\r\n                <Label\r\n                    backgroundFill=\"white\"\r\n                    showAnchorLine={true}\r\n                    anchorLineStroke={AnnotationLineColor}\r\n                    backgroundProps={{ stroke: AnnotationLineColor }}\r\n                    fontColor={\"black\"}\r\n                    subtitle={subText}\r\n                    title={titleText}\r\n                    width={200}\r\n                />\r\n                {subjectCircle && <CircleSubject stroke={AnnotationLineColor} />}\r\n                {showHorLine && (<LineSubject orientation={'vertical'} stroke={AnnotationLineColor} min={0} max={810} />)}\r\n            </Annotation>\r\n        )\r\n    }\r\n    else {\r\n        return (null)\r\n    }\r\n\r\n}","import { scaleOrdinal } from \"@visx/scale\";\r\nimport React from \"react\";\r\nimport { LargeColor, Line2019Color, Line2020Color, ResidentialColor, SettingChoices, SMEColor } from \"../Types/TypesandConsts\";\r\nimport { LegendOrdinal, LegendItem, LegendLabel } from '@visx/legend';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nexport default function CustomLegend(choice: SettingChoices) {\r\n    function legendScale(setting: SettingChoices): any {\r\n        if (setting === \"RawYearComparison\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [2019, 2020],\r\n                    range: [Line2019Color, Line2020Color],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYMarket\" || setting === \"YoYMarketRegion\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    function legendIcon(setting: SettingChoices, color: string, label?: string) {\r\n        if (setting === \"YoYMarket\") {\r\n            if (label === \"Residential\") { return (<HomeIcon htmlColor={color} fontSize={'large'}/>) }\r\n            else if (label === \"Business\") { return (<StoreIcon htmlColor={color} fontSize={'large'}/>) }\r\n            else if (label === \"Industrial\") { return (<BusinessIcon htmlColor={color} fontSize={'large'}/>) }\r\n        }\r\n        else {\r\n            return (<svg width={25} height={25}> <rect fill={color} width={25} height={25} /> </svg>)\r\n        }\r\n    }\r\n\r\n\r\n    if (!legendScale(choice)) {\r\n        return null;\r\n    }\r\n    else {\r\n        return (\r\n            <div style={{ zIndex: 1, position: 'fixed', top: \"1vh\", right: \"20vw\" }}>\r\n                <LegendOrdinal scale={legendScale(choice)} labelFormat={(label: any) => `${label}`}>\r\n                    {labels => (\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {labels.map((label, i) => (\r\n                                <LegendItem key={`legend-quantile-${i}`} margin=\"5px 5px\" >\r\n                                    {legendIcon(choice, label.value, label.text)}\r\n                                    <LegendLabel align=\"left\" margin=\"0 0 0 4px\"> {label.text} </LegendLabel>\r\n                                </LegendItem>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </LegendOrdinal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import { Paper } from '@material-ui/core';\r\nimport { AxisBottom, AxisLeft } from '@visx/axis';\r\nimport { curveBasis, curveCardinal } from '@visx/curve';\r\nimport { GridColumns, GridRows } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { scaleLinear, scaleTime } from '@visx/scale';\r\nimport { LinePath } from '@visx/shape';\r\nimport { Threshold } from '@visx/threshold';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Motion, spring } from 'react-motion';\r\nimport { monthlyConsumption, RawYearComparison } from '../Types/RawYearComparison';\r\nimport { BaseLineColor, GraphBackgroundColor, GraphLineColor, IntroText, LargeColor, Line2019Color, Line2020Color, Regions, ResidentialColor, SettingChoices, SMEColor } from '../Types/TypesandConsts';\r\nimport { monthlyYoYMarketChange, YoYMarketChange } from '../Types/YoYMarketChange';\r\nimport { monthlyYoYMarketRegions, YoYMarketRegions } from '../Types/YoYMarketRegions';\r\nimport { monthlyYoYChange, YoYTotalChange } from '../Types/YoYTotalChange';\r\nimport CustomAnnotation from './Annotations';\r\nimport CustomLegend from './Legend';\r\n\r\n\r\ntype ToolTipGraphProps = {\r\n    width: number;\r\n    height: number;\r\n    margin: { top: 40; right: 60; bottom: 50; left: 60 };\r\n}\r\n\r\n// data accessors\r\nfunction DateValue(d: any) {\r\n    return new Date(d.Month).valueOf();\r\n}\r\nfunction NumberValue(d: YoYTotalChange) {\r\n    return Number(d['Value']);\r\n}\r\n\r\nlet displayCurrent: any = (x: boolean) => {\r\n    return (x ? 'visible' : 'hidden');\r\n}\r\n\r\nlet xAxisSlide: any = (x: number, visible: boolean) => {\r\n    return (\r\n        {\r\n            WebkitTransform: `translate3d(${x}px, 0, 0)`,\r\n            transform: `translate3d(${x}px, 0, 0)`,\r\n            visibility: displayCurrent(visible)\r\n        }\r\n    )\r\n}\r\n\r\nlet dashedSlide: any = (x: number, visible: boolean) => {\r\n    return (\r\n        {\r\n            WebkitTransform: `translate3d(${x}px, 0, 0)`,\r\n            transform: `translate3d(${x}px, 0, 0)`,\r\n            visibility: displayCurrent(visible),\r\n            strokeDasharray: \"5, 3\"\r\n        }\r\n    )\r\n}\r\n\r\nlet anchorStyle: any = {\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    right: 0,\r\n}\r\n\r\n\r\n\r\nexport function ToolTipGraph(props: ToolTipGraphProps) {\r\n    const [CurrentData, setCurrentData] = useState<YoYMarketChange[] | YoYTotalChange[] | YoYMarketRegions[] | RawYearComparison[]>(monthlyYoYChange)\r\n    const [CurrentSetting, setCurrentSetting] = useState<SettingChoices>(\"Intro\")\r\n    const [SelectedRegion, setSelectedRegion] = useState<Regions | null>(null)\r\n    const [xScale, setxScale] = useState<any>(() => scaleTime<number>({ domain: [0, 1], range: [0, props.width - props.margin.left - props.margin.right] }))\r\n    const [yScale, setyScale] = useState<any>(() => scaleLinear<number>({ domain: [0, 1], nice: true, range: [props.height - props.margin.top - props.margin.bottom, 0] }))\r\n    let allState = { CurrentData, CurrentSetting, SelectedRegion, xScale, yScale }\r\n\r\n    let mainContainer: any = {\r\n        height: props.height * 5 + \"px\",\r\n        width: \"100%\",\r\n    }\r\n\r\n    let subContainer: any = {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        position: 'relative',\r\n    }\r\n\r\n    let itemStyle: any = {\r\n        position: 'fixed'\r\n    }\r\n\r\n\r\n    let changeSetting = (newSetting: SettingChoices) => {\r\n        setCurrentSetting(newSetting)\r\n        if (newSetting === \"YoYTotal\") {\r\n            setCurrentData(monthlyYoYChange)\r\n            setxScale(() => scaleTime<number>({ domain: [Math.min(...monthlyYoYChange.map(DateValue)), Math.max(...monthlyYoYChange.map(DateValue))], range: [0, props.width - props.margin.left - props.margin.right] }))\r\n            setyScale(() => scaleLinear<number>({ domain: [-25, 25], nice: true, range: [props.height - props.margin.top - props.margin.bottom, 0] }))\r\n        }\r\n        else if (newSetting === \"YoYMarket\") {\r\n            setCurrentData(monthlyYoYMarketChange)\r\n            setxScale(() => scaleTime<number>({ domain: [Math.min(...monthlyYoYMarketChange.map(DateValue)), Math.max(...monthlyYoYMarketChange.map(DateValue))], range: [0, props.width - props.margin.left - props.margin.right] }))\r\n            setyScale(() => scaleLinear<number>({ domain: [-25, 25], nice: true, range: [props.height - props.margin.top - props.margin.bottom, 0] }))\r\n        }\r\n        else if (newSetting === \"RawYearComparison\") {\r\n            setCurrentData(monthlyConsumption)\r\n            setxScale(() => scaleTime<number>({ domain: [Math.min(...monthlyConsumption.map(DateValue)), Math.max(...monthlyConsumption.map(DateValue))], range: [0, props.width - props.margin.left - props.margin.right] }))\r\n            setyScale(() => scaleLinear<number>({ domain: [Math.min(...monthlyConsumption.map(NumberValue)), Math.max(...monthlyConsumption.map(NumberValue))], nice: true, range: [props.height - props.margin.top - props.margin.bottom, 0] }))\r\n        }\r\n        else if (newSetting === \"YoYMarketRegion\") {\r\n            setCurrentData(monthlyYoYMarketRegions)\r\n            setxScale(() => scaleTime<number>({ domain: [Math.min(...monthlyYoYMarketRegions.map(DateValue)), Math.max(...monthlyYoYMarketRegions.map(DateValue))], range: [0, props.width - props.margin.left - props.margin.right] }))\r\n            setyScale(() => scaleLinear<number>({ domain: [-30, 30], nice: true, range: [props.height - props.margin.top - props.margin.bottom, 0] }))\r\n        }\r\n    }\r\n\r\n    let locationMapper = (yPos: number) => {\r\n        if (yPos < 500 && CurrentSetting !== \"Intro\") {\r\n            changeSetting(\"Intro\")\r\n        }\r\n        else if (yPos < 750 && CurrentSetting !== \"RawYearComparison\") {\r\n            changeSetting(\"RawYearComparison\")\r\n        }\r\n        else if (yPos < 1250 && CurrentSetting !== \"YoYTotal\") {\r\n            changeSetting(\"YoYTotal\")\r\n        }\r\n        else if (yPos < 1750 && CurrentSetting !== \"YoYMarket\") {\r\n            changeSetting(\"YoYMarket\")\r\n        }\r\n        else if (yPos < 2500 && CurrentSetting !== \"YoYMarketRegion\") {\r\n            changeSetting(\"YoYMarketRegion\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.onscroll = () => {\r\n            locationMapper(window.pageYOffset);\r\n        }\r\n    }, []);\r\n\r\n    // bounds\r\n    const xMax = props.width - props.margin.left - props.margin.right;\r\n    const yMax = props.height - props.margin.top - props.margin.bottom;\r\n    const baseLine = yMax / 2;\r\n    let isYoYTotal: boolean = CurrentSetting === \"YoYTotal\";\r\n    let isMarket: boolean = CurrentSetting === \"YoYMarket\";\r\n    let isMarketRegion: boolean = CurrentSetting === \"YoYMarketRegion\";\r\n    let isIntro: boolean = CurrentSetting === \"Intro\";\r\n    let isRawYear: boolean = CurrentSetting === \"RawYearComparison\";\r\n\r\n    return (\r\n        <div style={mainContainer} onScroll={() => console.log(\"test\")}>\r\n            <div style={subContainer}>\r\n\r\n\r\n                {/* The Intro box */}\r\n                <Motion style={{ motionVar: spring(isIntro ? 1 : 0) }}>\r\n                    {({ motionVar }) =>\r\n                        <div style={itemStyle}>\r\n                            <div style={{ opacity: motionVar, visibility: displayCurrent(isIntro) }}>\r\n                                <Paper>\r\n                                    {IntroText}\r\n                                </Paper>\r\n                                <Paper>\r\n                                    Small infographic representing a timeline or calendar showing how many days melbourne was in lockdown.\r\n                            </Paper>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </Motion>\r\n\r\n                {!isIntro ? CustomLegend(CurrentSetting) : null}\r\n\r\n                {/* The base shape for graphs */}\r\n                <svg height={props.height * 5} width={props.width} style={itemStyle}>\r\n                    <Motion style={{ motionVar: spring(isIntro ? 0 : 1) }}>\r\n                        {({ motionVar }) =>\r\n                            <svg width={props.width} height={props.height} style={{ opacity: motionVar }}>\r\n                                <rect x={0} y={0} width={props.width} height={props.height} fill={GraphBackgroundColor} rx={14} />\r\n                                <Group left={props.margin.left} top={props.margin.top}>\r\n                                    <GridRows scale={yScale} width={xMax} height={yMax} stroke={GraphLineColor} />\r\n                                    <GridColumns scale={xScale} width={xMax} height={yMax} stroke={GraphLineColor} />\r\n                                    <line x1={xMax} x2={xMax} y1={0} y2={yMax} stroke={GraphLineColor} />\r\n                                    <AxisBottom top={yMax} scale={xScale} />\r\n                                    <AxisLeft scale={yScale} />\r\n                                    {CustomAnnotation(CurrentSetting)}\r\n\r\n                                    {/* The Various axis titles */}\r\n                                    {(isYoYTotal || isMarket || isMarketRegion) ? <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}> YoY Usage Change (%) </text> : null}\r\n                                    {(isRawYear) ? <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}> Consumption (KwH) </text> : null}\r\n\r\n                                    {/* The Total Consumption Lines */}\r\n                                    <Group id={\"TotalConsumpion\"}>\r\n                                        <Motion style={{ motionVar: spring(isRawYear ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.TrueYear === 2019 })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={Line2019Color}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isRawYear)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarket ? -400 : 0) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.TrueYear === 2020 })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={Line2020Color}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isRawYear)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        {CustomLegend(\"RawYearComparison\")}\r\n                                    </Group>\r\n\r\n\r\n                                    {/* The undertone for the total yoy change graph and the line*/}\r\n                                    <Group id={\"TotalYoYChange\"}>\r\n                                        <Motion style={{ motionVar: spring(isYoYTotal ? 0.4 : 0) }}>\r\n                                            {({ motionVar }) =>\r\n                                                <Threshold\r\n                                                    id={`${Math.random()}`}\r\n                                                    data={CurrentData}\r\n                                                    x={(d) => xScale(DateValue(d)) ?? 0}\r\n                                                    y0={(d) => yScale(NumberValue(d)) ?? 0}\r\n                                                    y1={baseLine}\r\n                                                    clipAboveTo={0}\r\n                                                    clipBelowTo={yMax}\r\n                                                    curve={curveBasis}\r\n                                                    belowAreaProps={{ fill: 'violet', fillOpacity: motionVar, visibility: displayCurrent(isYoYTotal) }}\r\n                                                    aboveAreaProps={{ fill: 'green', fillOpacity: motionVar, }}\r\n                                                />\r\n                                            }\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isYoYTotal ? 0 : 400) }}>\r\n                                            {({ motionVar }) =>\r\n                                                <LinePath\r\n                                                    data={CurrentData}\r\n                                                    curve={curveBasis}\r\n                                                    x={(d: YoYTotalChange) => xScale(DateValue(d)) ?? 0}\r\n                                                    y={(d: YoYTotalChange) => yScale(NumberValue(d)) ?? 0}\r\n                                                    stroke={Line2020Color}\r\n                                                    strokeWidth={1.5}\r\n                                                    style={xAxisSlide(motionVar, isYoYTotal)}\r\n                                                />\r\n                                            }\r\n                                        </Motion>\r\n                                    </Group>\r\n\r\n                                    {/* The base line */}\r\n                                    {!isRawYear ? <LinePath\r\n                                        data={CurrentData}\r\n                                        curve={curveBasis}\r\n                                        x={(d: YoYMarketChange | YoYTotalChange | YoYMarketRegions) => xScale(DateValue(d)) ?? 100}\r\n                                        y={d => baseLine}\r\n                                        stroke={BaseLineColor}\r\n                                        strokeWidth={1.5}\r\n                                        strokeOpacity={0.8}\r\n                                        strokeDasharray=\"1,2\"\r\n                                    /> : null}\r\n\r\n                                    {/* The total market type lines */}\r\n                                    <Group id={\"TotalMarketType\"}>\r\n                                        <Motion style={{ motionVar: spring(isMarket ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isMarket)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarket ? 0 : -400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"SME\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isMarket)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarket ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isMarket)}\r\n                                            />}\r\n                                        </Motion>\r\n                                    </Group>\r\n\r\n                                    {/* The regional market type lines */}\r\n                                    <Group id={\"RegionMarketType\"}>\r\n                                        <Motion style={{ motionVar: spring(isMarketRegion ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return (d.MarketType === \"Residential\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isMarketRegion)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarketRegion ? 0 : -400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"SME\" && d.Region === \"Metropolitan\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isMarketRegion)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarketRegion ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"Large\" && d.Region === \"Metropolitan\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, isMarketRegion)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarketRegion ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"Residential\" && d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={dashedSlide(motionVar, isMarketRegion)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarketRegion ? 0 : -400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"SME\" && d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={dashedSlide(motionVar, isMarketRegion)}\r\n                                            />}\r\n                                        </Motion>\r\n                                        <Motion style={{ motionVar: spring(isMarketRegion ? 0 : 400) }}>\r\n                                            {({ motionVar }) => <LinePath\r\n                                                data={CurrentData.filter((d: any) => { return d.MarketType === \"Large\" && d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(DateValue(d)) ?? 0}\r\n                                                y={d => yScale(NumberValue(d)) ?? 0}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={dashedSlide(motionVar, isMarketRegion)}\r\n                                            />}\r\n                                        </Motion>\r\n                                    </Group>\r\n\r\n                                </Group>\r\n\r\n\r\n                            </svg>\r\n                        }\r\n                    </Motion>\r\n                </svg>\r\n            </div>\r\n\r\n\r\n            <div style={anchorStyle}>\r\n                <button onClick={() => { console.log(allState) }}>Check State</button>\r\n                <button onClick={() => { console.log(props) }}>Check Props</button>\r\n                <button onClick={() => { changeSetting(\"YoYMarket\") }}>Change to Market Type</button>\r\n                <button onClick={() => { changeSetting(\"YoYTotal\") }}>Change to Total</button>\r\n                <button onClick={() => { console.log(CurrentSetting, window.pageYOffset) }}>Test Button</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolTipGraph;","import React from 'react';\nimport './App.css';\nimport ToolTipGraph from './Visuals/AllThingsCombined';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToolTipGraph width={1200} height={900} margin={{ top: 40, right: 60, bottom: 50, left: 60 }} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <script>\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    </script>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
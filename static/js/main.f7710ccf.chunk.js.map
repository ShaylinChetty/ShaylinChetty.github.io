{"version":3,"sources":["consts.tsx","Data/DataFunctions.tsx","Data/StoryFunctions.tsx","MainApp/Intro.tsx","MainApp/SideBar.tsx","MainApp/Graph.tsx","MainApp/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResidentialColor","SMEColor","LargeColor","BaseColor","StepList","StepOrder","0","1","2","3","StoryLims","StepTranslations","MonthMap","January","February","March","April","May","June","July","August","September","October","November","December","setFunction","a","csv","process","then","data","tmpData","forEach","item","currentItem","Year","Month","Date","YoYChange","push","catch","err","Market","Region","Consumption","getStepNumber","CurrentMode","tempNo","Object","keys","find","key","StoryToolTipText","storyStep","setting","AnchorPost","l","t","position","left","top","Intro","style","height","width","display","flexDirection","id","Typography","src","alt","SideBar","props","useState","currStep","activeStep","setActiveStep","buttonVisible","setButtonVis","React","updateState","steps","useCallback","undefined","paperStyle","marginTop","buttonPaperStyle","textAlign","filterButtonPress","updateFilters","useEffect","Group","Stepper","orientation","map","label","index","Step","cursor","StepLabel","onClick","e","chosenLabel","updateStep","variant","Divider","alignItems","Paper","elevation","Button","color","MainGraph","xScale","setxScale","yScale","setyScale","CurrentStep","SetCurrentStep","yAxisLabel","setyLabel","RawConsumption","SetRawConsumption","RawConsumptionMarkets","SetRawConsumptionMarkets","YoYData","SetYoYData","YoYMarketData","SetYoYMarketData","YoYRegionData","SetYoYRegionData","YoYMarketRegionData","SetYoYMarketRegionData","ActiveFilters","SetFilters","canvasHeight","document","documentElement","clientHeight","canvasWidth","clientWidth","graphHeight","graphWidth","leftPad","setStoryStep","CurrStoryLimit","SetStorylim","ChartTitle","setTitle","PointOne","useRef","useBoolean","isCoachmark1Visible","hideCoachmark1","setFalse","showCoachmark1","setTrue","PointTwo","isCoachmark2Visible","hideCoachmark2","showCoachmark2","PointThree","isCoachmark3Visible","hideCoachmark3","showCoachmark3","positioningContainerProps","useMemo","directionalHint","DirectionalHint","topCenter","doNotLayer","newFilter","reset","detTitle","setDateValueScale","minDate","maxDate","minVal","maxVal","scaleTime","domain","nice","range","scaleLinear","setStepandScale","newStep","Math","min","d","valueOf","max","marketFilter","length","console","log","getRawYearData","getRawYearMarketsData","getYoYTotalData","getYoYMarketData","getYoYRegionData","getYoYMarketRegionData","xAxisSlide","x","visible","WebkitTransform","transform","visibility","Grid","container","ref","Coachmark","target","current","delayBeforeCoachmarkAnimation","TeachingBubbleContent","onDismiss","hasCloseButton","xs","borderRight","AxisBottom","scale","AxisLeft","motionVar","spring","LinePath","curve","curveCardinal","y","stroke","strokeWidth","className","includes","filter","Line","from","to","strokeDasharray","right","Fab","Tooltip","title","NavBar","AppBar","marginBottom","Toolbar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f7710ccf.chunk.js","sourcesContent":["// Colors        https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=8\r\nexport const ResidentialColor: string = \"#1f78b4\"; //2\r\nexport const SMEColor: string = \"#b2df8a\"; //3\r\nexport const LargeColor: string = \"#fb9a99\"; //6\r\nexport const InactiveColor: string = '#111';\r\nexport const GraphBackgroundColor: string = '#f3f3f3';\r\nexport const BaseLineColor: string = \"#000000\"\r\nexport const GraphLineColor: string = \"#e0e0e0\"\r\nexport const Line2020Color: string = \"#A62190\";\r\nexport const Line2019Color: string = \"#4760DE\";\r\nexport const AnnotationLineColor: string = \"#cc5f43\";\r\nexport const AnnotationFillColor: string = \"#5ba966\";\r\nexport const BaseColor: string = \"black\";\r\nexport const ThemeColor: string = \"#3f51b5\"\r\n\r\n\r\nexport type MarketType = 'Residential' | 'Commercial' | 'Large';\r\nexport type Regions = \"Regional\" | \"Metropolitan\";\r\nexport type DataFilters = \"Markets\" | \"2019\"\r\n\r\n\r\nexport type SettingChoices = \"YoYTotal\" | \"YoYMarketRegion\" | \"Intro\" | \"RawYearComparison\"\r\nexport const StepList: SettingChoices[] = [\"Intro\", \"RawYearComparison\", \"YoYTotal\", \"YoYMarketRegion\"]\r\nexport const StepOrder: { [key: number]: SettingChoices } = {\r\n    0: \"Intro\",\r\n    1: \"RawYearComparison\",\r\n    2: \"YoYTotal\",\r\n    3: \"YoYMarketRegion\"\r\n}\r\nexport const StoryLims = {\r\n    \"Intro\": 3,\r\n    \"RawYearComparison\": 2,\r\n    \"YoYTotal\": 3,\r\n    \"YoYMarketRegion\": 3\r\n}\r\nexport const StepTranslations = { \"Intro\": \"Introduction\", \"RawYearComparison\": \"Consumption Between Years\", \"YoYTotal\": \"Year on Year Change\", \"YoYMarketRegion\": \"Regional Changes\", \"YoYMarket\": \"Market Type Changes\" }\r\n\r\n\r\n\r\nexport type Month = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\"\r\nexport const MonthMap = {\r\n    January: 0,\r\n    February: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    November: 10,\r\n    December: 11\r\n};","import { csv } from \"d3\";\r\nimport { Month, MonthMap } from \"../consts\";\r\nimport { RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from \"./DataTypes\";\r\n\r\nexport async function getYoYTotalData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYTotal.csv`).then(function (data: any): void {\r\n        let tmpData: YoYTotal[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYTotal = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"ConsumptionYoY\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarket[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarket = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegion.csv`).then(function (data: any): void {\r\n        let tmpData: YoYRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegionMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarketRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarketRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumption.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearComparison[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearComparison = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearMarketsData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumptionMarkets.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearMarkets[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearMarkets = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}","import { CSSProperties } from \"react\";\r\nimport { SettingChoices, StepOrder } from \"../consts\";\r\n\r\nexport function getStepNumber(CurrentMode: SettingChoices): number {\r\n    let tempNo: number = Object.keys(StepOrder).find((key: any) => StepOrder[key] === CurrentMode) as unknown as number;\r\n    let stepNo = 1;\r\n    if (tempNo) {\r\n        stepNo = +tempNo\r\n        return stepNo\r\n    }\r\n    else {\r\n        return 1\r\n    }\r\n}\r\n\r\nexport function StoryToolTipText(storyStep: number, setting: SettingChoices): string {\r\n    if (setting === \"Intro\") {\r\n        return (\"Lets put a whole lot of text in here to see what happens\")\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (storyStep === 1) {\r\n            return (\"All three markets were mostly moving in sync prior to COVID lockdowns.\")\r\n        }\r\n        else if (storyStep === 2) {\r\n            return (\"Statewide restrictions saw most businesses close, and shift to work and schooling from home where possible\")\r\n        }\r\n        else if (storyStep === 3) {\r\n            return (\"The markets reached parity with each other again two months after strict lockdown rules ended.\")\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (storyStep === 1) {\r\n            return (\"All three markets were mostly moving in sync prior to COVID lockdowns.\")\r\n        }\r\n        else if (storyStep === 2) {\r\n            return (\"Statewide restrictions saw most businesses close, and shift to work and schooling from home where possible\")\r\n        }\r\n        else if (storyStep === 3) {\r\n            return (\"The markets reached parity with each other again two months after strict lockdown rules ended.\")\r\n        }\r\n    }\r\n    else if (setting === \"RawYearComparison\") {\r\n        if (storyStep === 1) {\r\n            return (\"Seasonal Trends\")\r\n        }\r\n        else if (storyStep === 2) {\r\n            return (\"Something else interesting\")\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport function IntroStoryTitle(storyStep: number, setting: SettingChoices) {\r\n    return (`Test Title ${String.fromCodePoint(0x1F354)}`)\r\n}\r\n\r\nexport function AnchorPost(setting: SettingChoices, storyStep: number): CSSProperties {\r\n    let l: string = \"0%\";\r\n    let t: string = \"0%\";\r\n    if (setting === \"Intro\") {\r\n        l = \"70%\";\r\n        t = \"50%\";\r\n    }\r\n    else if (setting === \"RawYearComparison\") {\r\n        if (storyStep === 1) {\r\n            l = \"27%\";\r\n            t = \"50%\";\r\n        }\r\n        else if (storyStep === 2) {\r\n            l = \"38%\";\r\n            t = \"80%\";\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (storyStep === 1) {\r\n            l = \"27%\";\r\n            t = \"50%\";\r\n        }\r\n        else if (storyStep === 2) {\r\n            l = \"38%\";\r\n            t = \"80%\";\r\n        }\r\n        else if (storyStep === 3) {\r\n            l = \"80%\";\r\n            t = \"40%\";\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (storyStep === 1) {\r\n            l = \"27%\";\r\n            t = \"50%\";\r\n        }\r\n        else if (storyStep === 2) {\r\n            l = \"38%\";\r\n            t = \"80%\";\r\n        }\r\n        else if (storyStep === 3) {\r\n            l = \"80%\";\r\n            t = \"40%\";\r\n        }\r\n    }\r\n    return ({ position: \"absolute\", left: l, top: t })\r\n}","import { Typography } from \"@material-ui/core\";\r\n\r\nexport function Intro() {\r\n    return (\r\n        <div style={{ height: \"90vh\", width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <div style={{ height: \"50%\", width: \"100%%\" }} id=\"IntroTextSpace\">\r\n                <Typography>\r\n                    When COVID-19 emerged in late 2019 few people could forsee the effects it would have on a global scale. Within Australia the pandemic has resulted in a series of historical first restrictions where international, state, and even local council borders have been closed or restricted.\r\n                    The state of Victoria has been the worst affected with more than 75% of Australian cases, and 90% of its fatalities. A series of lockdown measures has been placed across the state starting from March 2020, and spanning most of the year.\r\n                </Typography>\r\n\r\n                <Typography>\r\n                    The state of Victoria is located on the South-Eastern corner of Australia with a population of approximately 6.5 million residents. Melbourne and the surrounding metropolitan area, as the capital of the state, is home to around 5 million of these residents\r\n                    The timeline of covid events and restrictions can be broken down into two distinct phases: Lockdown 1 (shown in green) spanning 6 weeks with peak active cases of 530, and Lockdown 2 (shown in blue) spanning 3 months with a peak of 6766 active cases.\r\n                    While Lockdown 1 encouraged stay-at-home orders, Lockdown 2 saw the strict enforcement of restrictions including curfews, travel distance limits and a hard border enacted between regional and metropolitan Victoria.\r\n                    Regional Victoria restrictions were far more lenient and fewer in number during the second lockdown.\r\n                </Typography>\r\n\r\n                <Typography>\r\n                    In electricity grids understanding of consumer demand patterns is crucial to ensuring stability and minimising waste. Here we will explore some of the changes the electricity grid in Victoria, Australia saw in response to the COVID-19 lockdowns.\r\n                    Below you can see a timeline of Melbournes restrictions......\r\n                </Typography>\r\n            </div>\r\n            <img src={`${process.env.PUBLIC_URL}/DetailedTimeline.png`} width={\"100%\"} alt=\"Timeline of lockdown\" />\r\n        </div>\r\n    )\r\n}","import { Divider } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { BorderRight } from '@material-ui/icons';\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { Group } from '@visx/group';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingChoices, StepList, StepTranslations } from '../consts';\r\nimport { getStepNumber } from '../Data/StoryFunctions';\r\n\r\nexport default function SideBar(props: { currStep: SettingChoices, updateStep: Function, updateFilters: Function }) {\r\n    const [activeStep, setActiveStep] = useState<SettingChoices>(props.currStep);\r\n    const [PaperItems, setPaperItems] = useState<any[]>([]);\r\n    const [buttonVisible, setButtonVis] = useState<boolean>(true)\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState(undefined), []);\r\n\r\n\r\n    const steps = StepList;\r\n    const paperStyle: CSSProperties = {\r\n        width: \"95%\",\r\n        marginTop: \"10%\",\r\n    }\r\n\r\n    const buttonPaperStyle: CSSProperties = {\r\n        width: \"95%\",\r\n        marginTop: \"10%\",\r\n        textAlign: \"center\"\r\n    }\r\n\r\n    function filterButtonPress() {\r\n        props.updateFilters();\r\n        setButtonVis(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.currStep !== activeStep) {\r\n            setActiveStep(props.currStep);\r\n            setButtonVis(true)\r\n        }\r\n    })\r\n\r\n    const handleClick: any = (chosenLabel: SettingChoices) => {\r\n        setActiveStep(chosenLabel)\r\n        props.updateStep(chosenLabel);\r\n        setButtonVis(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <Group id=\"SideBar\" style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <Group id=\"Stepper\">\r\n                <Stepper activeStep={getStepNumber(activeStep)} orientation=\"vertical\">\r\n                    {steps.map((label, index) => (\r\n                        <Step key={label} style={{ cursor: \"pointer\" }}>\r\n                            <StepLabel onClick={(e) => { handleClick(label) }}><Typography variant=\"h6\">{StepTranslations[label]}</Typography></StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n            </Group>\r\n            <Divider />\r\n            <Group id=\"DetailedStory\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                {activeStep === \"RawYearComparison\" &&\r\n                    <>\r\n                        <Paper elevation={3} style={paperStyle}>\r\n                            <Typography>\r\n                                In a typical year Victoria generates approximately 46 million Megawatt-Hours (Mwh) of electricity. This is distributed across the year with peaks occuring during the hottest and coldest months.\r\n                                The graph on the right shows the total recorded consumption at monthly intervals. Peaks are evident in both years in July which is typically the coldest month in the year.\r\n                    </Typography>\r\n                        </Paper>\r\n                        <Paper elevation={3} style={buttonPaperStyle}>\r\n                            <Typography>\r\n                                Use the tooltips to introduce the breakdown of this overall consumption by market types.\r\n                    </Typography>\r\n                            {buttonVisible &&\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { filterButtonPress() }} style={{ marginTop: \"5%\" }}>\r\n                                    Show Market Types\r\n                    </Button>\r\n                            }\r\n                        </Paper>\r\n                    </>\r\n                }\r\n\r\n                {activeStep === \"YoYTotal\" &&\r\n                    <>\r\n                        <Paper elevation={3} style={paperStyle}>\r\n                            <Typography>\r\n                                Intead of looking at raw figures, let's take a look at the change between years instead. At an aggregated network level there is a net decrease of around -4%. This figure is more extreme than expected as 2020 was colder than 2019 - an factor which is usually indicative of increased electricity consumption.\r\n                    </Typography>\r\n                        </Paper>\r\n                        <Paper elevation={3} style={buttonPaperStyle}>\r\n                            <Typography>\r\n                                In this graph the two lockdowns are clearly visible. The initial lockdown in March leads to a trough in April, and escalating restrictions from July correlate with declines until restrictions ease again.\r\n                                The network level data is still very high level. Lets hit the button below and see what this looks like by Market Type.\r\n                    </Typography>\r\n                            {buttonVisible &&\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { filterButtonPress() }} style={{ marginTop: \"5%\" }}>\r\n                                    Show Market Types\r\n                    </Button>\r\n                            }\r\n                        </Paper>\r\n                    </>\r\n                }\r\n\r\n                {activeStep === \"YoYMarketRegion\" &&\r\n                    <>\r\n                        <Paper elevation={3} style={paperStyle}>\r\n                            <Typography>\r\n                                Regional restrictions saw Victoria split into two distinc regions - Regional and Metropolitan. These saw vastly different restrictions across lockdown one and two.\r\n                    </Typography>\r\n                        </Paper>\r\n                        <Paper elevation={3} style={buttonPaperStyle}>\r\n                            <Typography>\r\n                                Bringing in the market type restrictions shows a different picture.\r\n                    </Typography>\r\n                            {buttonVisible &&\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { filterButtonPress() }} style={{ marginTop: \"5%\" }}>\r\n                                    Show Market Types\r\n                    </Button>\r\n                            }\r\n                        </Paper>\r\n                    </>\r\n                }\r\n            </Group>\r\n        </Group>\r\n    );\r\n}\r\n","import { Button, Coachmark, DirectionalHint, IButtonProps, TeachingBubble, TeachingBubbleContent } from '@fluentui/react';\r\nimport { Fab, Grid, Tooltip, Typography } from '@material-ui/core';\r\nimport { AxisBottom, AxisLeft } from '@visx/axis';\r\nimport { curveCardinal } from '@visx/curve';\r\nimport { Group } from '@visx/group';\r\nimport { scaleLinear, scaleTime } from '@visx/scale';\r\nimport { Line, LinePath } from '@visx/shape';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Motion, spring } from 'react-motion';\r\nimport { BaseColor, DataFilters, LargeColor, Month, MonthMap, ResidentialColor, SettingChoices, SMEColor, StepOrder, StoryLims } from \"../consts\";\r\nimport { getRawYearData, getRawYearMarketsData, getYoYMarketData, getYoYMarketRegionData, getYoYRegionData, getYoYTotalData } from '../Data/DataFunctions';\r\nimport { RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from '../Data/DataTypes';\r\nimport { AnchorPost, StoryToolTipText, IntroStoryTitle } from '../Data/StoryFunctions';\r\nimport { Intro } from './Intro';\r\nimport SideBar from './SideBar';\r\nimport { getStepNumber } from '../Data/StoryFunctions';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport '../styles.css';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n\r\nexport function MainGraph() {\r\n    const [xScale, setxScale] = useState<any>(undefined)\r\n    const [yScale, setyScale] = useState<any>(undefined)\r\n    const [CurrentStep, SetCurrentStep] = useState<SettingChoices>(\"YoYTotal\")\r\n    const [xAxisLabel, setxLabel] = useState<string>(\"\")\r\n    const [yAxisLabel, setyLabel] = useState<string>(\"\")\r\n\r\n    const [RawConsumption, SetRawConsumption] = useState<RawYearComparison[]>([])\r\n    const [RawConsumptionMarkets, SetRawConsumptionMarkets] = useState<RawYearMarkets[]>([])\r\n    const [YoYData, SetYoYData] = useState<YoYTotal[]>([])\r\n    const [YoYMarketData, SetYoYMarketData] = useState<YoYMarket[]>([])\r\n    const [YoYRegionData, SetYoYRegionData] = useState<YoYRegion[]>([])\r\n    const [YoYMarketRegionData, SetYoYMarketRegionData] = useState<YoYMarketRegion[]>([])\r\n\r\n    const [ActiveFilters, SetFilters] = useState<DataFilters[]>([])\r\n\r\n    const canvasHeight = document.documentElement.clientHeight * 0.90;\r\n    const canvasWidth = document.documentElement.clientWidth * 0.80;\r\n    const graphHeight = document.documentElement.clientHeight * 0.84;\r\n    const graphWidth = document.documentElement.clientWidth * 0.75;\r\n    const leftPad = document.documentElement.clientWidth * 0.05;\r\n\r\n    //Story Variables\r\n    const [storyStep, setStoryStep] = useState<number>(1)\r\n    const [CurrStoryLimit, SetStorylim] = useState<number>(StoryLims[\"Intro\"])\r\n    const [ChartTitle, setTitle] = useState<string>(\"Total Consumption\")\r\n\r\n    // Ref targets\r\n    const PointOne = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark1Visible, { setFalse: hideCoachmark1, setTrue: showCoachmark1 }] = useBoolean(false);\r\n    const PointTwo = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark2Visible, { setFalse: hideCoachmark2, setTrue: showCoachmark2 }] = useBoolean(false);\r\n    const PointThree = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark3Visible, { setFalse: hideCoachmark3, setTrue: showCoachmark3 }] = useBoolean(false);\r\n\r\n    // Step Functions\r\n    function handleStep(nextNum: number) {\r\n        if (CurrentStep !== \"YoYMarketRegion\") {\r\n            setStepandScale(StepOrder[getStepNumber(CurrentStep) + 1])\r\n        }\r\n    }\r\n\r\n    const positioningContainerProps = React.useMemo(\r\n        () => ({\r\n            directionalHint: DirectionalHint.topCenter,\r\n            doNotLayer: false,\r\n        }),\r\n        [DirectionalHint.topCenter],\r\n    )\r\n\r\n    // Set Filters\r\n    function updateFilters(newFilter: DataFilters, reset = false) {\r\n        if (reset) {\r\n            SetFilters([])\r\n        }\r\n        else {\r\n            SetFilters([newFilter])\r\n            setTitle(detTitle(CurrentStep, true))\r\n        }\r\n    }\r\n\r\n    function activateMTFilter() {\r\n        showCoachmark1()\r\n        showCoachmark2()\r\n        showCoachmark3()\r\n        updateFilters(\"Markets\")\r\n    }\r\n\r\n    // Axis Functions\r\n    function setDateValueScale(minDate: number, maxDate: number, minVal: number, maxVal: number) {\r\n        setxScale(() => scaleTime<number>({ domain: [minDate, maxDate], nice: true, range: [leftPad, graphWidth] }))\r\n        setyScale(() => scaleLinear<number>({ domain: [maxVal, minVal], nice: true, range: [50, graphHeight] }))\r\n    }\r\n\r\n    function setStepandScale(newStep: SettingChoices) {\r\n        SetCurrentStep(newStep);\r\n        hideCoachmark1();\r\n        hideCoachmark2();\r\n        hideCoachmark3();\r\n        updateFilters(\"2019\", false)\r\n        setTitle(detTitle(newStep))\r\n        if (newStep === \"RawYearComparison\") {\r\n            let minDate = Math.min(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...RawConsumption.map((d) => { return d.Consumption }))\r\n            let maxVal = Math.max(...RawConsumption.map((d) => { return d.Consumption }))\r\n            setDateValueScale(minDate, maxDate, 0, maxVal)\r\n            setyLabel(\"Demand (MWh)\")\r\n            SetStorylim(StoryLims[newStep])\r\n        }\r\n        else if (newStep === \"YoYTotal\") {\r\n            let minDate = Math.min(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n            setyLabel(\"Year on Year Change (%)\")\r\n        }\r\n        else if (newStep === \"YoYMarketRegion\") {\r\n            let minDate = Math.min(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            setyLabel(\"Year on Year Change (%)\")\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n        }\r\n        else if (newStep === \"Intro\") {\r\n\r\n        }\r\n        if (newStep !== CurrentStep) {\r\n            setStoryStep(1);\r\n        }\r\n    }\r\n\r\n    function detTitle(setting: SettingChoices, marketFilter = false): string {\r\n        if (setting === \"YoYTotal\") {\r\n            if (marketFilter) {\r\n                return \"Electricity Demand across Victoria by Market Type\"\r\n            }\r\n            else {\r\n                return \"Electricity Demand across Victoria\"\r\n            }\r\n        }\r\n        else if (setting === \"RawYearComparison\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Market Type\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand\"\r\n            }\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Region\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand by Region and Market Type\"\r\n            }\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (RawConsumption.length === 0) {\r\n            console.log(\"Loading Data\")\r\n            getRawYearData(SetRawConsumption);\r\n            getRawYearMarketsData(SetRawConsumptionMarkets);\r\n            getYoYTotalData(SetYoYData);\r\n            getYoYMarketData(SetYoYMarketData)\r\n            getYoYRegionData(SetYoYRegionData)\r\n            getYoYMarketRegionData(SetYoYMarketRegionData)\r\n        }\r\n        else if (xScale === undefined && storyStep === 1 && CurrentStep !== \"Intro\") {\r\n            console.log(\"Data Loaded\")\r\n            setStepandScale(\"Intro\")\r\n        }\r\n    })\r\n\r\n    let xAxisSlide: any = (x: number, visible: boolean) => {\r\n        return (\r\n            {\r\n                WebkitTransform: `translate3d(${x}px, 0, 0)`,\r\n                transform: `translate3d(${x}px, 0, 0)`,\r\n                visibility: (visible ? 'visible' : 'hidden')\r\n            }\r\n        )\r\n    }\r\n\r\n    const leftColStyle = {\r\n        borderRight: '1px solid rgba(0, 0, 0, 0.05)'\r\n    }\r\n\r\n    return (\r\n        <Grid container>\r\n            <Group id=\"anchors\">\r\n                <span id=\"InfoAnchor1\" style={AnchorPost(CurrentStep, 1)} ref={PointOne} />\r\n                <span id=\"InfoAnchor2\" style={AnchorPost(CurrentStep, 2)} ref={PointTwo} />\r\n                <span id=\"InfoAnchor3\" style={AnchorPost(CurrentStep, 3)} ref={PointThree} />\r\n                {/* <button onClick={(e) => { console.log(isCoachmark1Visible, isCoachmark2Visible, isCoachmark3Visible) }}>Test</button> */}\r\n            </Group>\r\n\r\n            <Group id=\"infoBoxes\">\r\n                {(CurrentStep !== \"Intro\") && (\r\n                    <>\r\n                        {(CurrStoryLimit >= 1 && isCoachmark1Visible) && (\r\n                            <Coachmark target={PointOne.current} positioningContainerProps={positioningContainerProps} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark1} hasCloseButton>\r\n                                    {StoryToolTipText(1, CurrentStep)}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n\r\n                        {(CurrStoryLimit >= 2 && isCoachmark2Visible) && (\r\n                            <Coachmark target={PointTwo.current} positioningContainerProps={positioningContainerProps} delayBeforeCoachmarkAnimation={1000} >\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark2} hasCloseButton>\r\n                                    {StoryToolTipText(2, CurrentStep)}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                        {(CurrStoryLimit >= 3 && isCoachmark3Visible) && (\r\n                            <Coachmark target={PointThree.current} positioningContainerProps={positioningContainerProps} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark3} hasCloseButton>\r\n                                    {StoryToolTipText(3, CurrentStep)}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </Group>\r\n\r\n            <Grid item xs={2} style={leftColStyle}>\r\n                <SideBar currStep={CurrentStep} updateStep={setStepandScale} updateFilters={activateMTFilter} />\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n                {CurrentStep === \"Intro\" && <Intro />}\r\n\r\n                {(CurrentStep !== \"Intro\" && xScale) &&\r\n                    <Group id=\"CanvasContainer\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                        <Typography variant=\"h6\">{ChartTitle}</Typography>\r\n                        <svg height={canvasHeight} width={canvasWidth} id=\"Canvas\">\r\n                            <Group id=\"Axis\">\r\n                                <AxisBottom top={graphHeight} scale={xScale} />\r\n                                <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} />\r\n                            </Group>\r\n\r\n                            {/* Total Consumption Lines */}\r\n                            <Group id={\"TotalConsumpion\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <LinePath\r\n                                            data={RawConsumption}\r\n                                            curve={curveCardinal}\r\n                                            x={d => xScale(d.Month.valueOf())}\r\n                                            y={d => yScale(d.Consumption)}\r\n                                            stroke={BaseColor}\r\n                                            strokeWidth={1.5}\r\n                                            style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\"))}\r\n                                            className={\"lineStyle\"}\r\n                                        />}\r\n                                </Motion>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")) ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"RawYearMarkets\">\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY & YoYMarket Lines */}\r\n                            <Group id={\"YoYChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group>\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))} />\r\n                                            <LinePath\r\n                                                data={YoYData}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")) ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeMarkets\">\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY Region and Yoy Market+Region Lines */}\r\n                            <Group id={\"YoYRegionChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeRegion\">\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))} />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Metropolitan\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoyChangeMarketRegions\">\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")))}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                        </svg>\r\n                    </Group>\r\n                }\r\n            </Grid>\r\n            <Group id=\"NavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', top: \"50%\", right: \"0%\" }}>\r\n                {((CurrentStep !== \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) || (CurrentStep === \"Intro\")) &&\r\n                    <Fab color=\"primary\" onClick={(e) => handleStep(storyStep + 1)}>\r\n                        <NavigateNextIcon />\r\n                    </Fab>\r\n                }\r\n                {(CurrentStep !== \"YoYMarketRegion\" && CurrentStep !== \"Intro\" && !ActiveFilters.includes(\"Markets\")) &&\r\n                    <Tooltip title=\"Show Market Types to Continue\">\r\n                        <Fab onClick={(e) => updateFilters(\"Markets\")}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                }\r\n            </Group>\r\n        </Grid>\r\n    )\r\n}","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <AppBar position=\"static\" style={{ marginBottom: \"1vh\" }}>\r\n            <Toolbar>\r\n                <Typography variant=\"h5\">Visualising the Effects of COVID-19 on the Electricity Grid in Melbourne, Australia</Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport { MainGraph } from './MainApp/Graph';\nimport NavBar from './MainApp/NavBar';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <NavBar />\n      <MainGraph />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\ninitializeIcons()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
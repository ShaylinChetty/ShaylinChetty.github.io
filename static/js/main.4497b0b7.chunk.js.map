{"version":3,"sources":["consts.tsx","Data/DataFunctions.tsx","Data/StoryFunctions.tsx","MainApp/Calendar.tsx","MainApp/CustomAxis.tsx","MainApp/Intro.tsx","MainApp/Legend.tsx","MainApp/SideBar.tsx","MainApp/Graph.tsx","MainApp/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResidentialColor","SMEColor","LargeColor","Line2020Color","Line2019Color","BaseColor","StepList","StepOrder","0","1","2","3","4","StoryLims","StepTranslations","MonthMap","January","February","March","April","May","June","July","August","September","October","November","December","setFunction","a","csv","process","then","data","tmpData","forEach","item","currentItem","Year","Month","Date","YoYChange","push","catch","err","Market","Region","Consumption","parts","split","Change","DayName","parseInt","getStepNumber","CurrentMode","tempNo","Object","keys","find","key","StoryToolTipText","storyStep","setting","marketFilter","BubbleDirection","mkFilter","DirectionalHint","topRightEdge","topLeftEdge","bottomAutoEdge","bottomRightEdge","topCenter","leftCenter","bottomCenter","bottomLeftEdge","AnchorPost","l","t","position","left","top","KeyDateCalendar","props","CELL_SIZE","useState","activeDate","setActiveDate","activeDay","setActiveDay","selectedDayData","setselectedDayData","KeyDate2019","setKeyDate2019","undefined","xScale","setxScale","yScale","setyScale","topPad","detailCanvasHeight","xAxisRange","yAxisRange","scaleOrdinal","domain","range","pathMonth","t0","d0","getDay","w0","timeWeek","count","timeYear","t1","getFullYear","getMonth","d1","w1","formatDay","timeFormat","keyDateList","dateArray","KeyDateData","getKeyDates","colorScale","scaleQuantile","L1Start","L1End","L2Start","L2End","marketTypes","updateDate","newDate","Data2020","filter","d","dayName","Data2019","concat","setStoryLim","scaleBand","scaleLinear","nice","rowStyle","display","flexDirection","alignItems","map","year","firstDayOfYear","lastDayOfYear","yearDays","timeDays","yearMonths","timeMonths","Grid","container","xs","width","height","Group","transform","fontFamily","fontSize","textAnchor","fill","stroke","day","dayString","value","rextX","rectY","cellborder","cellstrokewidth","period","Tooltip","title","moment","format","x","y","onClick","e","includes","strokeWidth","cursor","firstOfMonth","style","id","AxisBottom","scale","AxisLeft","barHeight","barX","barY","lineColor","Bar","right","labels","label","i","LegendItem","margin","r","legendGlyphSize","cx","cy","LegendLabel","align","Math","round","extent","tickLabelSize","TwoYearAxis","graphHeight","leftPad","graphWidth","yAxisLabel","numTicks","tickFormat","tickColor","axisCenter","axisToPoint","axisFromPoint","className","Line","from","to","ticks","tick","tickX","tickY","formattedValue","hideAxisLine","OneYearAxis","tooltipText","currMonth","monthTicks","scaleTime","hideTicks","Intro","dangerouslySetInnerHTML","__html","CustomLegend","legendScale","legendIcon","color","x1","y1","x2","y2","stroke-dasharray","htmlColor","currStep","marketsActive","Card","zIndex","labelFormat","text","Button","variant","updateFilters","marginTop","SideBar","activeStep","setActiveStep","steps","useEffect","Stepper","orientation","index","Step","StepLabel","chosenLabel","updateStep","Typography","Divider","MainGraph","CurrentStep","SetCurrentStep","setyLabel","RawConsumption","SetRawConsumption","RawConsumptionMarkets","SetRawConsumptionMarkets","YoYData","SetYoYData","YoYMarketData","SetYoYMarketData","YoYRegionData","SetYoYRegionData","YoYMarketRegionData","SetYoYMarketRegionData","DailyChangeData","SetDailyChangeData","SetKeyDateData","ActiveFilters","SetFilters","canvasHeight","document","documentElement","clientHeight","canvasWidth","clientWidth","setStoryStep","CurrStoryLimit","SetStorylim","ChartTitle","setTitle","PointOne","React","useRef","useBoolean","isCoachmark1Visible","hideCoachmark1","setFalse","showCoachmark1","setTrue","PointTwo","isCoachmark2Visible","hideCoachmark2","showCoachmark2","PointThree","isCoachmark3Visible","hideCoachmark3","showCoachmark3","handleStep","setStepandScale","getTTPos","s","directionalHint","doNotLayer","newFilter","reset","detTitle","activateMTFilter","setDateValueScale","minDate","maxDate","minVal","maxVal","newStep","min","valueOf","max","length","console","log","getRawYearData","getRawYearMarketsData","getYoYTotalData","getYoYMarketData","getYoYRegionData","getYoYMarketRegionData","getDailyChangeData","getKeyDateData","xAxisSlide","visible","WebkitTransform","visibility","lineOpacity","ref","Coachmark","target","current","positioningContainerProps","delayBeforeCoachmarkAnimation","TeachingBubbleContent","onDismiss","hasCloseButton","borderRight","GridRows","GridColumns","motionVar","spring","LinePath","curve","curveCardinal","opacity","strokeDasharray","Fab","bottom","NavBar","AppBar","marginBottom","Toolbar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4497b0b7.chunk.js","sourcesContent":["// Colors        https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=8\r\nexport const ResidentialColor: string = \"#1f78b4\"; //2\r\nexport const SMEColor: string = \"#b2df8a\"; //3\r\nexport const LargeColor: string = \"#fb9a99\"; //6\r\nexport const InactiveColor: string = '#111';\r\nexport const GraphBackgroundColor: string = '#f3f3f3';\r\nexport const BaseLineColor: string = \"#000000\"\r\nexport const GraphLineColor: string = \"#e0e0e0\"\r\nexport const Line2020Color: string = \"#A62190\";\r\nexport const Line2019Color: string = \"#4760DE\";\r\nexport const AnnotationLineColor: string = \"#cc5f43\";\r\nexport const AnnotationFillColor: string = \"#5ba966\";\r\nexport const BaseColor: string = \"#000000\";\r\nexport const ThemeColor: string = \"#3f51b5\"\r\n\r\n\r\nexport type MarketType = 'Residential' | 'Commercial' | 'Large';\r\nexport type Regions = \"Regional\" | \"Metropolitan\";\r\nexport type DataFilters = \"Markets\" | \"2019\"\r\n\r\n\r\nexport type SettingChoices = \"YoYTotal\" | \"YoYMarketRegion\" | \"Intro\" | \"RawYearComparison\" | \"Calendar\"\r\nexport const StepList: SettingChoices[] = [\"Intro\", \"RawYearComparison\", \"YoYTotal\", \"YoYMarketRegion\", \"Calendar\"]\r\nexport const StepOrder: { [key: number]: SettingChoices } = {\r\n    0: \"Intro\",\r\n    1: \"RawYearComparison\",\r\n    2: \"YoYTotal\",\r\n    3: \"YoYMarketRegion\",\r\n    4: \"Calendar\"\r\n}\r\nexport const StoryLims = {\r\n    \"Intro\": 3,\r\n    \"RawYearComparison\": 2,\r\n    \"YoYTotal\": 3,\r\n    \"YoYMarketRegion\": 2,\r\n    \"Calendar\": 1\r\n}\r\nexport const StepTranslations = { \"Intro\": \"Introduction\", \"RawYearComparison\": \"Consumption Between Years\", \"YoYTotal\": \"Year on Year Change\", \"YoYMarketRegion\": \"Regional Changes\", \"YoYMarket\": \"Market Type Changes\", \"Calendar\": \"Day Changes\" }\r\n\r\n\r\n\r\nexport type Month = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\"\r\nexport const MonthMap = {\r\n    January: 0,\r\n    February: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    November: 10,\r\n    December: 11\r\n};","import { csv } from \"d3\";\r\nimport { Month, MonthMap } from \"../consts\";\r\nimport { DailyChange, KeyDate, RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from \"./DataTypes\";\r\n\r\nexport async function getYoYTotalData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYTotal.csv`).then(function (data: any): void {\r\n        let tmpData: YoYTotal[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYTotal = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"ConsumptionYoY\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarket[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarket = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegion.csv`).then(function (data: any): void {\r\n        let tmpData: YoYRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegionMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarketRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarketRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumption.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearComparison[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearComparison = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearMarketsData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumptionMarkets.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearMarkets[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearMarkets = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getDailyChangeData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoyByDay.csv`).then(function (data: any): void {\r\n        let tmpData: DailyChange[] = [];\r\n        data.forEach((item: any) => {\r\n            let parts = item[\"Date\"].split('/');\r\n            let currentItem: DailyChange = {\r\n                Date: new Date(parts[2], parts[1] - 1, parts[0]),\r\n                Change: item[\"ConsumptionChange\"],\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getKeyDateData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/KeyDateData.csv`).then(function (data: any): void {\r\n        let tmpData: KeyDate[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: KeyDate = {\r\n                Date: new Date(item[\"Earliest Date\"]),\r\n                DayName: item[\"Event\"],\r\n                Consumption: item[\"Consumption (kWh)\"],\r\n                Year: parseInt(item[\"Calendar Year\"]),\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}","import { DirectionalHint } from \"@fluentui/react\";\r\nimport { CSSProperties } from \"react\";\r\nimport { SettingChoices, StepOrder } from \"../consts\";\r\n\r\nexport function getStepNumber(CurrentMode: SettingChoices): number {\r\n    let tempNo: number = Object.keys(StepOrder).find((key: any) => StepOrder[key] === CurrentMode) as unknown as number;\r\n    let stepNo = 1;\r\n    if (tempNo) {\r\n        stepNo = +tempNo\r\n        return stepNo\r\n    }\r\n    else {\r\n        return 1\r\n    }\r\n}\r\n\r\nexport function StoryToolTipText(storyStep: number, setting: SettingChoices, marketFilter: boolean): string {\r\n    if (setting === \"YoYTotal\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"All three markets were mostly moving in sync prior to COVID lockdowns.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Statewide restrictions saw most businesses and factories close, and there is a shift to working and schooling from home where possible\")\r\n            }\r\n            else if (storyStep === 3) {\r\n                return (\"The markets reached parity with each other again two months after strict lockdown rules ended.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"At an aggregated network level there is a net decrease of around -4% across the year. This is a significant change in the context of electricity demand. especially as 2020 was colder than 2019.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"The first lockdown saw an extreme trough in April, while the second lockdown sees a similar lockdown in August.\")\r\n            }\r\n            else if (storyStep === 3) {\r\n                return (\"We can see slow returns to normal as restrictions ease over time in contrast to their sudden implementation\")\r\n            }\r\n        }\r\n\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"During the first lockdown the similar restrictions between regions saw the different market types following similar growth or decline.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"During the second lockdown regional businesses remained open unlike their metropolitan counterparts. Tourism however was virtually non-existant during this period in Regional Victoria.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"Lockdown restrictions saw Victoria split into two distinct regions with differing rules.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Regional Victoria had significantly fewer restrictions during Lockdown 2.\")\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"RawYearComparison\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"From this we can see that Residential consumption is far more sensitive to temperature than business or industrial consumption. The latter two market types remain relativley stable throughout the year.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"It's a little tough to interpret the change between 2019 and 2020 when viewed like this. Let's look only at the difference between the years on the next visual.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"In a typical year Victoria generates approximately 26 million Megawatt-Hours (MWh) of electricity.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Generation is distributed across the year with peaks occuring during the hottest and coldest months.\")\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"Calendar\") {\r\n        if (storyStep === 1) {\r\n            return (\"This calendar shows the year on year change, per day. Due to the shift of weekdays, and the leap year effect of 2020 the days do not align neatly. Click on some of the public holidays to investigate the year on year change in a little more detail.\")\r\n        }\r\n        else if (storyStep === 2) {\r\n            return (\"Public holidays during the lockdown period exhibited significantly more overall consumption. Nearly all of which is from the residential sector.\")\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport function IntroStoryTitle(storyStep: number, setting: SettingChoices) {\r\n    return (`Test Title ${String.fromCodePoint(0x1F354)}`)\r\n}\r\n\r\nexport function BubbleDirection(setting: SettingChoices, storyStep: number, mkFilter: boolean) {\r\n    if (setting === \"RawYearComparison\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.bottomAutoEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomRightEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topLeftEdge\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomCenter\r\n            }\r\n            else if (storyStep === 3) {\r\n                return DirectionalHint.bottomLeftEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 3) {\r\n                return DirectionalHint.leftCenter\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topLeftEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomLeftEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"Calendar\") {\r\n        if (storyStep === 1) {\r\n            return DirectionalHint.bottomCenter\r\n        }\r\n        else if (storyStep === 2) {\r\n            return DirectionalHint.bottomCenter\r\n        }\r\n    }\r\n    return DirectionalHint.topCenter\r\n}\r\n\r\nexport function AnchorPost(setting: SettingChoices, storyStep: number, mkFilter: boolean): CSSProperties {\r\n    let l: string = \"70%\";\r\n    let t: string = \"50%\";\r\n    if (setting === \"RawYearComparison\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"34%\";\r\n                t = \"41%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"68%\";\r\n                t = \"47%\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"34%\";\r\n                t = \"57%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"74%\";\r\n                t = \"59%\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"31%\";\r\n                t = \"52%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"36%\";\r\n                t = \"65%\";\r\n            }\r\n            else if (storyStep === 3) {\r\n                l = \"77%\";\r\n                t = \"64%\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30%\";\r\n                t = \"51%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"40%\";\r\n                t = \"66%\";\r\n            }\r\n            else if (storyStep === 3) {\r\n                l = \"85%\";\r\n                t = \"57%\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30%\";\r\n                t = \"47%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"75%\";\r\n                t = \"65%\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30%\";\r\n                t = \"46%\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"75%\";\r\n                t = \"59%\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"Calendar\") {\r\n        if (storyStep === 1) {\r\n            l = \"47%\";\r\n            t = \"20%\";\r\n        }\r\n        else if (storyStep === 2) {\r\n            l = \"47%\";\r\n            t = \"65%\";\r\n        }\r\n    }\r\n    return ({ position: \"absolute\", left: l, top: t })\r\n}","import { Grid, Tooltip } from '@material-ui/core';\r\nimport { Group } from '@visx/group';\r\nimport { LegendItem, LegendLabel, LegendQuantile } from '@visx/legend';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile, scaleTime } from '@visx/scale';\r\nimport { timeDays, timeMonths, timeWeek, timeYear } from 'd3-time';\r\nimport { timeFormat } from 'd3-time-format';\r\nimport moment from 'moment';\r\nimport React, { CSSProperties, useState } from 'react';\r\nimport { DailyChange, KeyDate } from '../Data/DataTypes';\r\nimport { Bar, BarStack } from '@visx/shape';\r\nimport { AxisBottom, AxisLeft, ComputedTick } from '@visx/axis';\r\nimport { LargeColor, Line2019Color, Line2020Color, ResidentialColor, SMEColor } from '../consts';\r\n\r\ninterface CalendarProps {\r\n    width: number,\r\n    height: number,\r\n    data: DailyChange[],\r\n    KeyDateData: KeyDate[],\r\n    setStoryLim: Function\r\n}\r\n\r\nexport function KeyDateCalendar(props: CalendarProps) {\r\n    const CELL_SIZE = 20;\r\n    const [activeDate, setActiveDate] = useState<string>(\"\")\r\n    const [activeDay, setActiveDay] = useState<string>(\"\")\r\n    const [selectedDayData, setselectedDayData] = useState<KeyDate[]>([])\r\n    const [KeyDate2019, setKeyDate2019] = useState<Date>();\r\n\r\n    const [xScale, setxScale] = useState<any>(undefined)\r\n    const [yScale, setyScale] = useState<any>(undefined)\r\n\r\n    const leftPad = 50;\r\n    const topPad = 30;\r\n    const graphCanvasHeight = 200;\r\n    const detailCanvasHeight = 500;\r\n    const detailCanvasWidth = 500;\r\n    const xAxisRange: [number, number] = [leftPad, detailCanvasWidth]\r\n    const yAxisRange: [number, number] = [detailCanvasHeight - topPad, topPad]\r\n\r\n    const marketColorScale = scaleOrdinal({\r\n        domain: [\"Residential\", \"Commercial\", \"Large\"],\r\n        range: ['#6c5efb', '#c998ff', '#a44afe'],\r\n    });\r\n\r\n    function pathMonth(t0: any) {\r\n        const d0 = t0.getDay();\r\n        const w0 = timeWeek.count(timeYear(t0), t0);\r\n        const t1 = new Date(t0.getFullYear(), t0.getMonth() + 1, 0);\r\n        const d1 = t1.getDay();\r\n        const w1 = timeWeek.count(timeYear(t1), t1);\r\n\r\n        return `\r\n            M${(w0 + 1) * CELL_SIZE},${d0 * CELL_SIZE}\r\n            H${w0 * CELL_SIZE} V${7 * CELL_SIZE}\r\n            H${w1 * CELL_SIZE} V${(d1 + 1) * CELL_SIZE}\r\n            H${(w1 + 1) * CELL_SIZE} V0\r\n            H${(w0 + 1) * CELL_SIZE}Z\r\n        `;\r\n    }\r\n\r\n    const formatDay = timeFormat('%Y-%m-%d');\r\n    const keyDateList = getKeyDates();\r\n\r\n    const colorScale = scaleQuantile({\r\n        domain: [-50, 50],\r\n        range: [\"#a50026\", \"#f46d43\", \"#ffffbf\", \"#66bd63\", \"#006837\"]\r\n    })\r\n\r\n    const L1Start = new Date(\"2020-03-20\")\r\n    const L1End = new Date(\"2020-05-10\")\r\n    const L2Start = new Date(\"2020-07-08\")\r\n    const L2End = new Date(\"2020-11-08\")\r\n    const marketTypes = ['Residential', 'Commercial', 'Large']\r\n\r\n    function updateDate(newDate: string) {\r\n        setActiveDate(newDate)\r\n        let Data2020 = props.KeyDateData.filter((d: KeyDate) => { return (formatDay(d.Date) === newDate) })\r\n        let dayName = Data2020[0].DayName\r\n        setActiveDay(dayName)\r\n        let Data2019 = props.KeyDateData.filter((d: KeyDate) => { return (d.DayName === dayName) && (d.Year === 2019) })\r\n        setKeyDate2019(Data2020.concat(Data2019)[3].Date)\r\n        setselectedDayData(Data2020.concat(Data2019))\r\n\r\n        props.setStoryLim(2)\r\n\r\n        setxScale(() => scaleBand({ domain: marketTypes, range: xAxisRange }))\r\n        setyScale(() => scaleLinear<number>({ domain: [0, 50000], nice: true, range: yAxisRange }))\r\n    }\r\n\r\n    function getKeyDates() {\r\n        let dateArray = []\r\n        for (var key in props.KeyDateData) {\r\n            dateArray.push(formatDay(props.KeyDateData[key].Date))\r\n        }\r\n        return dateArray;\r\n    }\r\n\r\n    let rowStyle: CSSProperties = {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {[2020].map(year => {\r\n                const firstDayOfYear = new Date(year, 0, 1);\r\n                const lastDayOfYear = new Date(year + 1, 0, 1);\r\n                const yearDays = timeDays(firstDayOfYear, lastDayOfYear);\r\n                const yearMonths = timeMonths(firstDayOfYear, lastDayOfYear);\r\n                const legendGlyphSize = 15\r\n\r\n                return (\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <svg width={props.width} height={graphCanvasHeight} key={`year-${year}`}>\r\n                                <Group transform={`translate(${(props.width - CELL_SIZE * 70) / 2},0)`}>\r\n                                    <text transform={`translate(-6,${CELL_SIZE * 3.5})rotate(-90)`} fontFamily=\"sans-serif\" fontSize={15} textAnchor=\"middle\" >\r\n                                        {year}\r\n                                    </text>\r\n\r\n                                    <Group fill=\"none\" stroke=\"#ccc\">\r\n                                        {yearDays.map(day => {\r\n                                            const dayString = formatDay(day);\r\n                                            const value = props.data.filter((d: DailyChange) => { return dayString === formatDay(d.Date) })[0].Change\r\n                                            const rextX = timeWeek.count(timeYear(day), day) * CELL_SIZE\r\n                                            const rectY = day.getDay() * CELL_SIZE\r\n                                            let cellborder = \"#fffff\"\r\n                                            let cellstrokewidth = 1\r\n                                            let period = \"\"\r\n                                            if (day >= L1Start && day <= L1End) {\r\n                                                cellborder = Line2019Color;\r\n                                                cellstrokewidth = 2;;\r\n                                                period = \" (Lockdown 1)\";\r\n                                            }\r\n                                            else if (day >= L2Start && day <= L2End) {\r\n                                                cellborder = Line2020Color;\r\n                                                cellstrokewidth = 2;\r\n                                                period = \" (Lockdown 2)\"\r\n                                            }\r\n                                            return (\r\n                                                <>\r\n                                                    <Tooltip title={`${moment(dayString).format(\"dddd D MMMM YYYY\")}: ${value}% ${period}`} key={`${dayString}-Tooltip-box`}>\r\n                                                        <rect\r\n                                                            fill={colorScale(value)}\r\n                                                            width={CELL_SIZE}\r\n                                                            height={CELL_SIZE}\r\n                                                            x={rextX}\r\n                                                            y={rectY}\r\n                                                            key={`day-rect-${dayString}`}\r\n                                                            onClick={(e) => { if (keyDateList.includes(dayString)) { updateDate(dayString) } }}\r\n                                                            stroke={cellborder}\r\n                                                            strokeWidth={cellstrokewidth}\r\n                                                        />\r\n                                                    </Tooltip>\r\n                                                    {keyDateList.includes(dayString) &&\r\n                                                        <Tooltip title={`${moment(dayString).format(\"dddd D MMMM YYYY\")}: ${value}% ${period}`} key={`${dayString}-Tooltip-mark`}>\r\n                                                            <text x={rextX + (CELL_SIZE - 12)} y={rectY + (CELL_SIZE - 5)} stroke=\"red\" strokeWidth={1} onClick={(e) => { updateDate(dayString) }} cursor={\"pointer\"}>!</text>\r\n                                                        </Tooltip>\r\n                                                    }\r\n                                                </>\r\n                                            )\r\n                                        })}\r\n                                    </Group>\r\n\r\n                                    <Group fill=\"none\" stroke=\"#000\" strokeWidth={4}>\r\n                                        {yearMonths.map(firstOfMonth => (\r\n                                            <path d={pathMonth(firstOfMonth)} key={`month-path-${formatDay(firstOfMonth)}`} />\r\n                                        ))}\r\n                                    </Group>\r\n                                </Group>\r\n                            </svg>\r\n                        </Grid>\r\n\r\n                        {activeDate !== \"\" &&\r\n                            <Grid item xs={4} style={rowStyle}>\r\n                                <text>{activeDay} 2019 - {moment(KeyDate2019).format(\"DD MMMM\")}</text>\r\n                                <svg width={detailCanvasWidth} height={detailCanvasHeight} id=\"Calendar2019Graphs\">\r\n                                    <AxisBottom top={detailCanvasHeight - topPad} scale={xScale} />\r\n                                    <AxisLeft left={leftPad} scale={yScale} />\r\n                                    <Group id=\"2019Graph\">\r\n                                        {selectedDayData.filter((d: KeyDate) => { return (d.Year === 2019) }).map((d: KeyDate) => {\r\n                                            const barHeight = detailCanvasHeight - yScale(d.Consumption);\r\n                                            const barX = xScale(d.Market);\r\n                                            const barY = detailCanvasHeight - barHeight;\r\n                                            let lineColor = ResidentialColor\r\n                                            if (d.Market === \"Commercial\") lineColor = SMEColor\r\n                                            else if (d.Market === \"Residential\") lineColor = ResidentialColor\r\n                                            else if (d.Market === \"Large\") lineColor = LargeColor\r\n                                            return (\r\n                                                <Bar\r\n                                                    key={`bar-${d.Date}-${d.Market}-outline`}\r\n                                                    x={barX + 50}\r\n                                                    y={barY - topPad}\r\n                                                    width={50}\r\n                                                    height={barHeight}\r\n                                                    fill={lineColor}\r\n                                                />\r\n                                            )\r\n                                        })}\r\n                                    </Group>\r\n                                </svg>\r\n                            </Grid>\r\n                        }\r\n                        {activeDate !== \"\" &&\r\n                            <Grid item xs={4} style={rowStyle}>\r\n                                <text>{activeDay} 2020 - {moment(activeDate).format(\"DD MMMM\")}</text>\r\n\r\n                                <svg width={detailCanvasWidth} height={detailCanvasHeight} id=\"Calendar2020Graphs\">\r\n                                    <AxisBottom top={detailCanvasHeight - topPad} scale={xScale} />\r\n                                    <AxisLeft left={leftPad} scale={yScale} />\r\n                                    <Group id=\"2019Graph\">\r\n                                        {selectedDayData.filter((d: KeyDate) => { return (d.Year === 2020) }).map((d: KeyDate) => {\r\n                                            const barHeight = detailCanvasHeight - yScale(d.Consumption);\r\n                                            const barX = xScale(d.Market);\r\n                                            const barY = detailCanvasHeight - barHeight;\r\n                                            let lineColor = ResidentialColor\r\n                                            if (d.Market === \"Commercial\") lineColor = SMEColor\r\n                                            else if (d.Market === \"Residential\") lineColor = ResidentialColor\r\n                                            else if (d.Market === \"Large\") lineColor = LargeColor\r\n                                            return (\r\n                                                <Bar\r\n                                                    key={`bar-${d.Date}-${d.Market}-outline`}\r\n                                                    x={barX + 50}\r\n                                                    y={barY - topPad}\r\n                                                    width={50}\r\n                                                    height={barHeight}\r\n                                                    fill={lineColor}\r\n                                                />\r\n                                            )\r\n                                        })}\r\n                                    </Group>\r\n                                </svg>\r\n                            </Grid>\r\n                        }\r\n                        <Group id=\"CalLegend\" style={{ position: 'fixed', right: '10%' }}>\r\n                            <LegendQuantile scale={colorScale}>\r\n                                {(labels: any) =>\r\n                                    labels.map((label: any, i: number) => (\r\n                                        <LegendItem key={`legend-${i}`} >\r\n                                            <svg width={legendGlyphSize} height={legendGlyphSize} style={{ margin: '2px 0' }}>\r\n                                                <circle fill={label.value} r={legendGlyphSize / 2} cx={legendGlyphSize / 2} cy={legendGlyphSize / 2} />\r\n                                            </svg>\r\n                                            <LegendLabel align=\"left\" margin=\"0 4px\">\r\n                                                {`${Math.round(label.extent[0])}% to ${Math.round(label.extent[1])}%`}\r\n                                            </LegendLabel>\r\n                                        </LegendItem>\r\n                                    ))\r\n                                }\r\n                            </LegendQuantile>\r\n                        </Group>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </div >\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { AxisBottom, AxisLeft, ComputedTick } from '@visx/axis';\r\nimport { Group } from \"@visx/group\";\r\nimport { Line } from \"@visx/shape\";\r\nimport moment from \"moment\";\r\nimport { scaleBand, scaleTime } from \"@visx/scale\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport { BaseColor, Line2019Color, Line2020Color } from \"../consts\";\r\n\r\nconst tickLabelSize = 15;\r\n\r\nexport function TwoYearAxis(graphHeight: number, leftPad: number, graphWidth: number, xScale: any, yScale: any, yAxisLabel: string) {\r\n    return (\r\n        <>\r\n            <AxisBottom top={graphHeight} scale={xScale} numTicks={24} tickFormat={(d: any) => { return d }}>\r\n                {props => {\r\n                    const tickColor = props.label === \"2019\" ? '#4760DE' : \"#A62190\";\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            <Line from={props.axisFromPoint} to={props.axisToPoint} stroke={\"#000000\"} />\r\n                            {props.ticks.map((tick, i) => {\r\n                                const tickX = tick.to.x;\r\n                                const tickY = tick.to.y + tickLabelSize;\r\n                                return (\r\n                                    <Group key={`vx-tick-${tick.value}-${i}`} className={'vx-axis-tick'}>\r\n                                        <Line from={tick.from} to={tick.to} stroke={tickColor} />\r\n                                        <text transform={`translate(${tickX}, ${tickY})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={moment(tick.formattedValue).format(\"Y\") === \"2019\" ? '#4760DE' : \"#A62190\"} >\r\n                                            {moment(tick.formattedValue).format(\"MMM\")}\r\n                                        </text>\r\n                                    </Group>\r\n                                );\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n            <AxisBottom top={graphHeight + 30} scale={scaleBand({ domain: [\"2019\", \"2020\"], range: [leftPad, graphWidth] })} numTicks={4} hideAxisLine tickFormat={(d: any) => { return moment(d).format(\"Y\") }} >\r\n                {props => {\r\n                    const tickLabelSize = 10;\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            {props.ticks.map((tick, i) => {\r\n                                const tickX = tick.to.x;\r\n                                const tickY = tick.to.y + tickLabelSize;\r\n                                return (\r\n                                    <Group key={`vx-tick-${tick.value}-${i}`} className={'vx-axis-tick'}>\r\n                                        <text transform={`translate(${tickX}, ${tickY})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={tick.formattedValue === \"2019\" ? Line2019Color : Line2020Color} >\r\n                                            {tick.formattedValue}\r\n                                        </text>\r\n                                    </Group>\r\n                                );\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n\r\n            <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport function OneYearAxis(graphHeight: number, leftPad: number, graphWidth: number, xScale: any, yScale: any, yAxisLabel: string) {\r\n    return (\r\n        <>\r\n            <AxisBottom top={graphHeight} scale={xScale} numTicks={12} tickFormat={(d: any) => { return d }} >\r\n                {props => {\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            <Line from={props.axisFromPoint} to={props.axisToPoint} stroke={\"#000000\"} />\r\n                            {props.ticks.map((tick, i) => {\r\n                                return monthTicks(tick)\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n            <AxisBottom top={graphHeight + 30} scale={scaleTime<number>({ domain: [new Date(\"2019-01-01\"), new Date(\"2020-12-01\")], nice: true, range: [leftPad, graphWidth] })} numTicks={1} hideAxisLine tickFormat={(d: any) => { return moment(d).format(\"Y\") }} hideTicks />\r\n\r\n            <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction monthTicks(tick: ComputedTick<any>) {\r\n    let tooltipText = \"Prior to Lockdown\"\r\n    let tickColor = BaseColor\r\n\r\n    let currMonth = moment(tick.formattedValue).format(\"MMMM\")\r\n    if ([\"April\", \"May\"].includes(currMonth)) {\r\n        tooltipText = \"Lockdown 1\"\r\n        tickColor = Line2019Color\r\n    }\r\n    else if ([\"July\", \"August\", \"September\", \"October\"].includes(currMonth)) {\r\n        tooltipText = \"Lockdown 2\"\r\n        tickColor = Line2020Color\r\n    }\r\n    else if ([\"January\", \"February\"].includes(currMonth)) {\r\n        tooltipText = \"Prior to Lockdown\"\r\n        tickColor = BaseColor\r\n    }\r\n    else if (currMonth === \"March\") {\r\n        tooltipText = \"Lockdown begins in Third Week\"\r\n        tickColor = Line2019Color\r\n    }\r\n    else if (currMonth === \"June\") {\r\n        tooltipText = \"Eased Restrictions\"\r\n        tickColor = BaseColor\r\n    }\r\n    else if ([\"November\", \"December\"].includes(currMonth)) {\r\n        tooltipText = \"Easing Restrictions Over Time\"\r\n        tickColor = BaseColor\r\n    }\r\n\r\n    return (\r\n        <Group key={`vx-tick-${tick.value}`}>\r\n            <Line from={tick.from} to={tick.to} stroke={\"#A62190\"} />\r\n            <Tooltip title={tooltipText}>\r\n                <text transform={`translate(${tick.to.x}, ${tick.to.y + tickLabelSize})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={tickColor} cursor={'pointer'}>\r\n                    {moment(tick.formattedValue).format(\"MMMM\")}\r\n                </text>\r\n            </Tooltip>\r\n        </Group>\r\n    );\r\n}","\r\nexport function Intro() {\r\n    return (\r\n        <div style={{ height: \"90vh\", width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <div dangerouslySetInnerHTML={{ __html: \"<iframe src='https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1n-8-FkqEqL-hZbaXNfr5ApCmQKAhRsdSjKSMdV5JNKQ&font=Default&lang=en&timenav_position=top&initial_zoom=1&height=650' width='100%' height='650' webkitallowfullscreen mozallowfullscreen allowfullscreen frameborder='0'></iframe>\"}} />\r\n        </div>\r\n    )\r\n}\r\n","import { Button, Card } from \"@material-ui/core\";\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport { LegendItem, LegendLabel, LegendOrdinal } from '@visx/legend';\r\nimport { scaleOrdinal } from \"@visx/scale\";\r\nimport React from \"react\";\r\nimport { LargeColor, ResidentialColor, SettingChoices, SMEColor } from \"../consts\";\r\n\r\nexport function CustomLegend(props: { currStep: SettingChoices, marketsActive: boolean, updateFilters: Function }) {\r\n    function legendScale(setting: SettingChoices): any {\r\n        if (setting === \"RawYearComparison\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYTotal\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential Metropolitan\", \"Residential Regional\", \"Business Metropolitan\", \"Business Regional\", \"Industrial Metropolitan\", \"Industrial Regional\"],\r\n                    range: [ResidentialColor, ResidentialColor, SMEColor, SMEColor, LargeColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    function legendIcon(setting: SettingChoices, color: string, label: string, lineDash = false) {\r\n        if (setting === \"YoYTotal\" || setting === \"RawYearComparison\") {\r\n            if (label === \"Residential\") { return (<HomeIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Business\") { return (<StoreIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Industrial\") { return (<BusinessIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Overall\") { return (<MoreHorizIcon htmlColor={color} fontSize={'large'} />) }\r\n        }\r\n        else {\r\n            if (label.includes(\"Regional\")) {\r\n                return (<svg width={25} height={25}> <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" stroke={color} stroke-dasharray=\"4\" /> </svg>)\r\n            }\r\n            else {\r\n                return (<svg width={25} height={25}> <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" stroke={color} /> </svg>)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    if (!legendScale(props.currStep) || props.currStep === \"Intro\") {\r\n        return null;\r\n    }\r\n    else if (!props.marketsActive) {\r\n        return (\r\n            <Card style={{ zIndex: 1, position: 'fixed', top: \"15vh\", right: \"10vw\" }}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { props.updateFilters() }} style={{ marginTop: \"5%\" }}> Show Market Types </Button>\r\n            </Card>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Card style={{ zIndex: 1, position: 'fixed', top: \"15vh\", right: \"10vw\" }}>\r\n                <LegendOrdinal scale={legendScale(props.currStep)} labelFormat={(label: any) => `${label}`}>\r\n                    {labels => (\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {labels.map((label, i) => (\r\n                                <LegendItem key={`legend-quantile-${i}`} margin=\"5px 5px\" >\r\n                                    {legendIcon(props.currStep, label.value, label.text)}\r\n                                    <LegendLabel align=\"left\" margin=\"0 0 0 4px\"> {label.text} </LegendLabel>\r\n                                </LegendItem>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </LegendOrdinal>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n","import { Divider } from '@material-ui/core';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Group } from '@visx/group';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingChoices, StepList, StepTranslations } from '../consts';\r\nimport { getStepNumber } from '../Data/StoryFunctions';\r\n\r\nexport default function SideBar(props: { currStep: SettingChoices, updateStep: Function, updateFilters: Function }) {\r\n    const [activeStep, setActiveStep] = useState<SettingChoices>(props.currStep);\r\n    const steps = StepList;\r\n\r\n    useEffect(() => {\r\n        if (props.currStep !== activeStep) {\r\n            setActiveStep(props.currStep);\r\n        }\r\n    })\r\n\r\n    const handleClick: any = (chosenLabel: SettingChoices) => {\r\n        setActiveStep(chosenLabel)\r\n        props.updateStep(chosenLabel);\r\n    }\r\n\r\n\r\n    return (\r\n        <Group id=\"SideBar\" style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <Group id=\"Stepper\">\r\n                <Stepper activeStep={getStepNumber(activeStep)} orientation=\"vertical\">\r\n                    {steps.map((label, index) => (\r\n                        <Step key={label} style={{ cursor: \"pointer\" }}>\r\n                            <StepLabel onClick={(e) => { handleClick(label) }}><Typography variant=\"button\">{StepTranslations[label]}</Typography></StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n            </Group>\r\n            <Divider />\r\n        </Group>\r\n    );\r\n}\r\n","import { Coachmark, TeachingBubbleContent } from '@fluentui/react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { Fab, Grid, Tooltip, Typography } from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport { curveCardinal } from '@visx/curve';\r\nimport { GridColumns, GridRows } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { scaleLinear, scaleTime } from '@visx/scale';\r\nimport { Line, LinePath } from '@visx/shape';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Motion, spring } from 'react-motion';\r\nimport { BaseColor, DataFilters, LargeColor, ResidentialColor, SettingChoices, SMEColor, StepOrder, StoryLims } from \"../consts\";\r\nimport { getDailyChangeData, getKeyDateData, getRawYearData, getRawYearMarketsData, getYoYMarketData, getYoYMarketRegionData, getYoYRegionData, getYoYTotalData } from '../Data/DataFunctions';\r\nimport { DailyChange, KeyDate, RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from '../Data/DataTypes';\r\nimport { AnchorPost, BubbleDirection, getStepNumber, StoryToolTipText } from '../Data/StoryFunctions';\r\nimport '../styles.css';\r\nimport { KeyDateCalendar } from './Calendar';\r\nimport { OneYearAxis, TwoYearAxis } from './CustomAxis';\r\nimport { Intro } from './Intro';\r\nimport { CustomLegend } from './Legend';\r\nimport SideBar from './SideBar';\r\n\r\n\r\nexport function MainGraph() {\r\n    const [xScale, setxScale] = useState<any>(undefined)\r\n    const [yScale, setyScale] = useState<any>(undefined)\r\n    const [CurrentStep, SetCurrentStep] = useState<SettingChoices>(\"YoYTotal\")\r\n    const [yAxisLabel, setyLabel] = useState<string>(\"\")\r\n\r\n    const [RawConsumption, SetRawConsumption] = useState<RawYearComparison[]>([])\r\n    const [RawConsumptionMarkets, SetRawConsumptionMarkets] = useState<RawYearMarkets[]>([])\r\n    const [YoYData, SetYoYData] = useState<YoYTotal[]>([])\r\n    const [YoYMarketData, SetYoYMarketData] = useState<YoYMarket[]>([])\r\n    const [YoYRegionData, SetYoYRegionData] = useState<YoYRegion[]>([])\r\n    const [YoYMarketRegionData, SetYoYMarketRegionData] = useState<YoYMarketRegion[]>([])\r\n    const [DailyChangeData, SetDailyChangeData] = useState<DailyChange[]>([])\r\n    const [KeyDateData, SetKeyDateData] = useState<KeyDate[]>([])\r\n\r\n    const [ActiveFilters, SetFilters] = useState<DataFilters[]>([])\r\n\r\n    const canvasHeight = document.documentElement.clientHeight * 0.90;\r\n    const canvasWidth = document.documentElement.clientWidth * 0.80;\r\n    const graphHeight = document.documentElement.clientHeight * 0.80;\r\n    const graphWidth = document.documentElement.clientWidth * 0.75;\r\n    const leftPad = document.documentElement.clientWidth * 0.05;\r\n\r\n    //Story Variables\r\n    const [storyStep, setStoryStep] = useState<number>(1)\r\n    const [CurrStoryLimit, SetStorylim] = useState<number>(StoryLims[\"Intro\"])\r\n    const [ChartTitle, setTitle] = useState<string>(\"Total Consumption\")\r\n\r\n    // Ref targets\r\n    const PointOne = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark1Visible, { setFalse: hideCoachmark1, setTrue: showCoachmark1 }] = useBoolean(false);\r\n    const PointTwo = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark2Visible, { setFalse: hideCoachmark2, setTrue: showCoachmark2 }] = useBoolean(false);\r\n    const PointThree = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark3Visible, { setFalse: hideCoachmark3, setTrue: showCoachmark3 }] = useBoolean(false);\r\n\r\n    // Step Functions\r\n    function handleStep() {\r\n        if (CurrentStep !== \"YoYMarketRegion\") {\r\n            setStepandScale(StepOrder[getStepNumber(CurrentStep) + 1])\r\n        }\r\n    }\r\n\r\n    // Tooltip positioning\r\n    function getTTPos(s: number) {\r\n        return (\r\n            {\r\n                directionalHint: BubbleDirection(CurrentStep, s, ActiveFilters.includes(\"Markets\")),\r\n                doNotLayer: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    // Set Filters\r\n    function updateFilters(newFilter: DataFilters, reset = false) {\r\n        if (reset) {\r\n            SetFilters([])\r\n        }\r\n        else {\r\n            SetFilters([newFilter])\r\n            setTitle(detTitle(CurrentStep, true))\r\n        }\r\n    }\r\n\r\n    function activateMTFilter() {\r\n        hideCoachmark1()\r\n        hideCoachmark2()\r\n        hideCoachmark3()\r\n        updateFilters(\"Markets\")\r\n    }\r\n\r\n    // Axis Functions\r\n    function setDateValueScale(minDate: number, maxDate: number, minVal: number, maxVal: number) {\r\n        setxScale(() => scaleTime<number>({ domain: [minDate, maxDate], nice: true, range: [leftPad, graphWidth] }))\r\n        setyScale(() => scaleLinear<number>({ domain: [maxVal, minVal], nice: true, range: [50, graphHeight] }))\r\n    }\r\n\r\n    function setStepandScale(newStep: SettingChoices) {\r\n        SetCurrentStep(newStep);\r\n        hideCoachmark1();\r\n        hideCoachmark2();\r\n        hideCoachmark3();\r\n        updateFilters(\"2019\", false)\r\n        setTitle(detTitle(newStep))\r\n        SetStorylim(StoryLims[newStep])\r\n        if (newStep === \"RawYearComparison\") {\r\n            let minDate = Math.min(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let maxVal = Math.max(...RawConsumption.map((d) => { return d.Consumption }))\r\n            setDateValueScale(minDate, maxDate, 0, maxVal)\r\n            setyLabel(\"Demand (MWh)\")\r\n        }\r\n        else if (newStep === \"YoYTotal\") {\r\n            let minDate = Math.min(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n            setyLabel(\"Year on Year Change (%)\")\r\n        }\r\n        else if (newStep === \"YoYMarketRegion\") {\r\n            let minDate = Math.min(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            setyLabel(\"Year on Year Change (%)\")\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n        }\r\n        else if (newStep === \"Intro\") {\r\n\r\n        }\r\n        if (newStep !== CurrentStep) {\r\n            setStoryStep(1);\r\n        }\r\n    }\r\n\r\n    function detTitle(setting: SettingChoices, marketFilter = false): string {\r\n        if (setting === \"YoYTotal\") {\r\n            if (marketFilter) {\r\n                return \"Electricity Demand across Victoria by Market Type\"\r\n            }\r\n            else {\r\n                return \"Electricity Demand across Victoria\"\r\n            }\r\n        }\r\n        else if (setting === \"RawYearComparison\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Market Type\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand\"\r\n            }\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Region\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand by Region and Market Type\"\r\n            }\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (RawConsumption.length === 0) {\r\n            console.log(\"Loading Data\")\r\n            getRawYearData(SetRawConsumption);\r\n            getRawYearMarketsData(SetRawConsumptionMarkets);\r\n            getYoYTotalData(SetYoYData);\r\n            getYoYMarketData(SetYoYMarketData)\r\n            getYoYRegionData(SetYoYRegionData)\r\n            getYoYMarketRegionData(SetYoYMarketRegionData)\r\n            getDailyChangeData(SetDailyChangeData)\r\n            getKeyDateData(SetKeyDateData)\r\n        }\r\n        else if (xScale === undefined && storyStep === 1 && CurrentStep !== \"Intro\") {\r\n            console.log(\"Data Loaded\")\r\n            setStepandScale(\"Intro\")\r\n        }\r\n        if (!isCoachmark1Visible) {\r\n            showCoachmark1()\r\n            showCoachmark2()\r\n            showCoachmark3()\r\n        }\r\n    })\r\n\r\n    let xAxisSlide: any = (x: number, visible: boolean) => {\r\n        return (\r\n            {\r\n                WebkitTransform: `translate3d(${x}px, 0, 0)`,\r\n                transform: `translate3d(${x}px, 0, 0)`,\r\n                visibility: (visible ? 'visible' : 'hidden')\r\n            }\r\n        )\r\n    }\r\n\r\n    const leftColStyle = {\r\n        borderRight: '1px solid rgba(0, 0, 0, 0.05)'\r\n    }\r\n\r\n    const lineOpacity = ActiveFilters.includes(\"Markets\") ? 0 : 1\r\n\r\n    return (\r\n        <Grid container>\r\n            <Group id=\"anchors\">\r\n                <span id=\"InfoAnchor1\" style={AnchorPost(CurrentStep, 1, ActiveFilters.includes(\"Markets\"))} ref={PointOne} />\r\n                <span id=\"InfoAnchor2\" style={AnchorPost(CurrentStep, 2, ActiveFilters.includes(\"Markets\"))} ref={PointTwo} />\r\n                <span id=\"InfoAnchor3\" style={AnchorPost(CurrentStep, 3, ActiveFilters.includes(\"Markets\"))} ref={PointThree} />\r\n            </Group>\r\n\r\n            <Group id=\"LegendContainer\">\r\n                <CustomLegend currStep={CurrentStep} marketsActive={ActiveFilters.includes(\"Markets\")} updateFilters={activateMTFilter} />\r\n            </Group>\r\n\r\n            <Group id=\"infoBoxes\">\r\n                {(CurrentStep !== \"Intro\") && (\r\n                    <>\r\n                        {(CurrStoryLimit >= 1 && isCoachmark1Visible) && (\r\n                            <Coachmark target={PointOne.current} positioningContainerProps={getTTPos(1)} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark1} hasCloseButton>\r\n                                    {StoryToolTipText(1, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n\r\n                        {(CurrStoryLimit >= 2 && isCoachmark2Visible) && (\r\n                            <Coachmark target={PointTwo.current} positioningContainerProps={getTTPos(2)} delayBeforeCoachmarkAnimation={1000} >\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark2} hasCloseButton>\r\n                                    {StoryToolTipText(2, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                        {(CurrStoryLimit >= 3 && isCoachmark3Visible) && (\r\n                            <Coachmark target={PointThree.current} positioningContainerProps={getTTPos(3)} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark3} hasCloseButton>\r\n                                    {StoryToolTipText(3, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </Group>\r\n\r\n            <Grid item xs={2} style={leftColStyle}>\r\n                <SideBar currStep={CurrentStep} updateStep={setStepandScale} updateFilters={activateMTFilter} />\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n                {CurrentStep === \"Intro\" && <Intro />}\r\n\r\n                {(CurrentStep !== \"Intro\" && CurrentStep !== \"Calendar\" && xScale) &&\r\n                    <Group id=\"CanvasContainer\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                        <Typography variant=\"h6\">{ChartTitle}</Typography>\r\n                        <svg height={canvasHeight} width={canvasWidth} id=\"Canvas\">\r\n\r\n                            <Group id=\"Axis\">\r\n                                {CurrentStep !== \"RawYearComparison\" ? OneYearAxis(graphHeight, leftPad, graphWidth, xScale, yScale, yAxisLabel) : TwoYearAxis(graphHeight, leftPad, graphWidth, xScale, yScale, yAxisLabel)}\r\n                                <GridRows scale={yScale} width={graphWidth - leftPad} height={graphHeight} stroke=\"#e0e0e0\" left={leftPad} />\r\n                                <GridColumns scale={xScale} width={graphWidth} height={graphHeight - 50} stroke=\"#e0e0e0\" top={50} />\r\n                            </Group>\r\n\r\n                            {/* Total Consumption Lines */}\r\n                            <Group id={\"TotalConsumpion\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <LinePath\r\n                                            data={RawConsumption}\r\n                                            curve={curveCardinal}\r\n                                            x={d => xScale(d.Month.valueOf())}\r\n                                            y={d => yScale(d.Consumption)}\r\n                                            stroke={BaseColor}\r\n                                            strokeWidth={1.5}\r\n                                            style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\"))}\r\n                                            className={\"lineStyle\"}\r\n                                        />}\r\n                                </Motion>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"RawYearMarkets\">\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY & YoYMarket Lines */}\r\n                            <Group id={\"YoYChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group>\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))} />\r\n                                            <LinePath\r\n                                                data={YoYData}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeMarkets\">\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY Region and Yoy Market+Region Lines */}\r\n                            <Group id={\"YoYRegionChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeRegion\">\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))} />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Metropolitan\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoyChangeMarketRegions\">\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n                        </svg>\r\n                    </Group>\r\n                }\r\n                {CurrentStep === \"Calendar\" &&\r\n                    <Group id=\"CalendarGroup\">\r\n                        <KeyDateCalendar data={DailyChangeData} width={graphWidth} height={graphHeight} KeyDateData={KeyDateData} setStoryLim={SetStorylim}/>\r\n                    </Group>\r\n                }\r\n            </Grid>\r\n\r\n            <Group id=\"NavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', top: \"50%\", right: \"0%\" }}>\r\n                {(CurrentStep !== \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) &&\r\n                    <Fab color=\"primary\" onClick={(e) => handleStep()}>\r\n                        <NavigateNextIcon />\r\n                    </Fab>\r\n                }\r\n                {(CurrentStep !== \"YoYMarketRegion\" && CurrentStep !== \"Intro\" && !ActiveFilters.includes(\"Markets\")) &&\r\n                    <Tooltip title=\"Show Market Types to Continue\">\r\n                        <Fab onClick={(e) => activateMTFilter()}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                }\r\n            </Group>\r\n            <Group id=\"IntroNavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', bottom: \"0%\", right: \"0%\", flexDirection: 'column' }} className={\"introNavButton\"}>\r\n                {(CurrentStep === \"Intro\") &&\r\n                    <>\r\n                        <Fab color=\"primary\" onClick={(e) => handleStep()}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                        <Typography variant=\"button\">Next Visual</Typography>\r\n                    </>\r\n                }\r\n            </Group>\r\n        </Grid >\r\n    )\r\n}","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <AppBar position=\"static\" style={{ marginBottom: \"1vh\" }}>\r\n            <Toolbar>\r\n                <Typography variant=\"h5\">Visualising the Effects of COVID-19 on the Electricity Grid in Melbourne, Australia</Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport { MainGraph } from './MainApp/Graph';\nimport NavBar from './MainApp/NavBar';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <NavBar />\n      <MainGraph />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\ninitializeIcons()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
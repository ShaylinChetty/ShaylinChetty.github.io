{"version":3,"sources":["consts.tsx","Data/DataFunctions.tsx","Data/StoryFunctions.tsx","MainApp/Calendar.tsx","MainApp/CustomAxis.tsx","MainApp/Intro.tsx","MainApp/Legend.tsx","MainApp/SideBar.tsx","MainApp/Graph.tsx","MainApp/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResidentialColor","SMEColor","LargeColor","Line2020Color","Line2019Color","BaseColor","StepList","StepOrder","0","1","2","3","4","StoryLims","StepTranslations","MonthMap","January","February","March","April","May","June","July","August","September","October","November","December","setFunction","a","csv","process","then","data","tmpData","forEach","item","currentItem","Year","Month","Date","YoYChange","push","catch","err","Market","Region","Consumption","parts","split","Math","round","DayName","parseInt","getStepNumber","CurrentMode","tempNo","Object","keys","find","key","StoryToolTipText","storyStep","setting","marketFilter","BubbleDirection","mkFilter","DirectionalHint","topRightEdge","topLeftEdge","bottomAutoEdge","bottomRightEdge","topCenter","leftCenter","bottomCenter","bottomLeftEdge","rightCenter","AnchorPost","l","t","position","left","top","KeyDateCalendar","props","CELL_SIZE","useState","activeDate","setActiveDate","activeDay","setActiveDay","selectedDayData","setselectedDayData","KeyDate2019","setKeyDate2019","showLockdownPeriod","setshowLockdownPeriod","undefined","xScale","setxScale","yScale","setyScale","leftPad","topPad","detailCanvasHeight","detailCanvasWidth","xAxisRange","yAxisRange","scaleOrdinal","domain","range","pathMonth","t0","d0","getDay","w0","timeWeek","count","timeYear","t1","getFullYear","getMonth","d1","w1","formatDay","timeFormat","colorScale","dateArray","KeyDateData","getKeyDates","scaleQuantile","L1Start","L1End","L2Start","L2End","marketTypes","rowStyle","display","flexDirection","alignItems","Grid","container","map","year","firstDayOfYear","lastDayOfYear","yearDays","timeDays","yearMonths","timeMonths","xs","width","height","Group","transform","fontFamily","fontSize","textAnchor","fill","stroke","day","dayString","value","filter","d","rextX","rectY","cellborder","cellstrokewidth","period","Tooltip","title","moment","format","x","y","strokeWidth","className","firstOfMonth","ButtonGroup","size","event","Button","variant","color","onClick","e","newDate","setStoryLim","Data2020","dayName","Data2019","concat","scaleBand","scaleLinear","nice","updateDate","style","id","AxisBottom","scale","AxisLeft","GridRows","barHeight","barX","barY","lineColor","Bar","right","labels","reverse","label","i","LegendItem","margin","r","legendGlyphSize","cx","cy","LegendLabel","align","index","extent","FormControlLabel","control","Checkbox","checked","onChange","target","name","tickLabelSize","BigTooltip","withStyles","theme","tooltip","TwoYearAxis","graphHeight","graphWidth","yAxisLabel","numTicks","tickFormat","axisCenter","axisToPoint","axisFromPoint","Line","from","to","ticks","tick","tickX","tickY","formattedValue","hideAxisLine","labelClassName","OneYearAxis","tooltipText","tickColor","currMonth","includes","cursor","monthTicks","scaleTime","hideTicks","Intro","dangerouslySetInnerHTML","__html","CustomLegend","legendScale","legendIcon","x1","y1","x2","y2","stroke-dasharray","htmlColor","currStep","marketsActive","Card","zIndex","labelFormat","text","updateFilters","marginTop","SideBar","activeStep","setActiveStep","steps","useEffect","Stepper","orientation","Step","StepLabel","chosenLabel","updateStep","Typography","Divider","MainGraph","CurrentStep","SetCurrentStep","setyLabel","showDialog","setShowDialog","RawConsumption","SetRawConsumption","RawConsumptionMarkets","SetRawConsumptionMarkets","YoYData","SetYoYData","YoYMarketData","SetYoYMarketData","YoYRegionData","SetYoYRegionData","YoYMarketRegionData","SetYoYMarketRegionData","DailyChangeData","SetDailyChangeData","SetKeyDateData","StepReset","setStepReset","ActiveFilters","SetFilters","canvasHeight","document","documentElement","clientHeight","canvasWidth","clientWidth","setStoryStep","CurrStoryLimit","SetStorylim","ChartTitle","setTitle","PointOne","React","useRef","useBoolean","isCoachmark1Visible","hideCoachmark1","setFalse","showCoachmark1","setTrue","PointTwo","isCoachmark2Visible","hideCoachmark2","showCoachmark2","PointThree","isCoachmark3Visible","hideCoachmark3","showCoachmark3","handleStep","setStepandScale","getTTPos","s","directionalHint","doNotLayer","newFilter","reset","detTitle","activateMTFilter","handleDialogClose","setDateValueScale","minDate","maxDate","minVal","maxVal","newStep","min","valueOf","max","length","console","log","getRawYearData","getRawYearMarketsData","getYoYTotalData","getYoYMarketData","getYoYRegionData","getYoYMarketRegionData","getDailyChangeData","getKeyDateData","xAxisSlide","visible","WebkitTransform","visibility","lineOpacity","ref","Coachmark","current","positioningContainerProps","delayBeforeCoachmarkAnimation","TeachingBubbleContent","onDismiss","hasCloseButton","borderRight","GridColumns","motionVar","spring","LinePath","curve","curveCardinal","opacity","strokeDasharray","Fab","bottom","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","Link","href","DialogActions","autoFocus","NavBar","AppBar","marginBottom","Toolbar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e55445e.chunk.js","sourcesContent":["// Colors        https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=8\r\nexport const ResidentialColor: string = \"#1f78b4\"; //2\r\nexport const SMEColor: string = \"#b2df8a\"; //3\r\nexport const LargeColor: string = \"#fb9a99\"; //6\r\nexport const InactiveColor: string = '#111';\r\nexport const GraphBackgroundColor: string = '#f3f3f3';\r\nexport const BaseLineColor: string = \"#000000\"\r\nexport const GraphLineColor: string = \"#e0e0e0\"\r\nexport const Line2020Color: string = \"#A62190\";\r\nexport const Line2019Color: string = \"#4760DE\";\r\nexport const AnnotationLineColor: string = \"#cc5f43\";\r\nexport const AnnotationFillColor: string = \"#5ba966\";\r\nexport const BaseColor: string = \"#000000\";\r\nexport const ThemeColor: string = \"#3f51b5\"\r\n\r\n\r\nexport type MarketType = 'Residential' | 'Commercial' | 'Large';\r\nexport type Regions = \"Regional\" | \"Metropolitan\";\r\nexport type DataFilters = \"Markets\" | \"2019\"\r\n\r\n\r\nexport type SettingChoices = \"YoYTotal\" | \"YoYMarketRegion\" | \"Intro\" | \"RawYearComparison\" | \"Calendar\"\r\nexport const StepList: SettingChoices[] = [\"Intro\", \"RawYearComparison\", \"YoYTotal\", \"YoYMarketRegion\", \"Calendar\"]\r\nexport const StepOrder: { [key: number]: SettingChoices } = {\r\n    0: \"Intro\",\r\n    1: \"RawYearComparison\",\r\n    2: \"YoYTotal\",\r\n    3: \"YoYMarketRegion\",\r\n    4: \"Calendar\"\r\n}\r\nexport const StoryLims = {\r\n    \"Intro\": 3,\r\n    \"RawYearComparison\": 2,\r\n    \"YoYTotal\": 3,\r\n    \"YoYMarketRegion\": 2,\r\n    \"Calendar\": 1\r\n}\r\nexport const StepTranslations = { \"Intro\": \"Introduction\", \"RawYearComparison\": \"Consumption Between Years\", \"YoYTotal\": \"Year on Year Change\", \"YoYMarketRegion\": \"Regional Changes\", \"YoYMarket\": \"Market Type Changes\", \"Calendar\": \"Day Changes\" }\r\n\r\n\r\n\r\nexport type Month = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\"\r\nexport const MonthMap = {\r\n    January: 0,\r\n    February: 1,\r\n    March: 2,\r\n    April: 3,\r\n    May: 4,\r\n    June: 5,\r\n    July: 6,\r\n    August: 7,\r\n    September: 8,\r\n    October: 9,\r\n    November: 10,\r\n    December: 11\r\n};","import { csv } from \"d3\";\r\nimport { Month, MonthMap } from \"../consts\";\r\nimport { DailyChange, KeyDate, RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from \"./DataTypes\";\r\n\r\nexport async function getYoYTotalData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYTotal.csv`).then(function (data: any): void {\r\n        let tmpData: YoYTotal[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYTotal = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"ConsumptionYoY\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarket[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarket = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegion.csv`).then(function (data: any): void {\r\n        let tmpData: YoYRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getYoYMarketRegionData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoYRegionMarket.csv`).then(function (data: any): void {\r\n        let tmpData: YoYMarketRegion[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: YoYMarketRegion = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                YoYChange: item[\"YoY Consumption Change\"],\r\n                Market: item[\"Market Type\"],\r\n                Region: item[\"Region\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumption.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearComparison[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearComparison = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getRawYearMarketsData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/RawConsumptionMarkets.csv`).then(function (data: any): void {\r\n        let tmpData: RawYearMarkets[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: RawYearMarkets = {\r\n                Year: item[\"Year\"],\r\n                Month: new Date(item[\"Year\"], MonthMap[item[\"Month\"] as Month], 1),\r\n                Consumption: item[\"Consumption\"],\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getDailyChangeData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/YoyByDay.csv`).then(function (data: any): void {\r\n        let tmpData: DailyChange[] = [];\r\n        data.forEach((item: any) => {\r\n            let parts = item[\"Date\"].split('-');\r\n            let currentItem: DailyChange = {\r\n                Date: new Date(parts[0], parts[1] - 1, parts[2]),\r\n                Consumption: Math.round(item[\"Consumption\"]),\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}\r\n\r\nexport async function getKeyDateData(setFunction: Function) {\r\n    csv(`${process.env.PUBLIC_URL}/KeyDateData.csv`).then(function (data: any): void {\r\n        let tmpData: KeyDate[] = [];\r\n        data.forEach((item: any) => {\r\n            let currentItem: KeyDate = {\r\n                Date: new Date(item[\"Earliest Date\"]),\r\n                DayName: item[\"Event\"],\r\n                Consumption: item[\"Consumption (kWh)\"],\r\n                Year: parseInt(item[\"Calendar Year\"]),\r\n                Market: item[\"Market Type\"]\r\n            }\r\n            tmpData.push(currentItem)\r\n        })\r\n        setFunction(tmpData)\r\n    }).catch(function (err: any) { throw err; })\r\n}","import { DirectionalHint } from \"@fluentui/react\";\r\nimport { CSSProperties } from \"react\";\r\nimport { SettingChoices, StepOrder } from \"../consts\";\r\n\r\nexport function getStepNumber(CurrentMode: SettingChoices): number {\r\n    let tempNo: number = Object.keys(StepOrder).find((key: any) => StepOrder[key] === CurrentMode) as unknown as number;\r\n    let stepNo = 1;\r\n    if (tempNo) {\r\n        stepNo = +tempNo\r\n        return stepNo\r\n    }\r\n    else {\r\n        return 1\r\n    }\r\n}\r\n\r\nexport function StoryToolTipText(storyStep: number, setting: SettingChoices, marketFilter: boolean): string {\r\n    if (setting === \"YoYTotal\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"All three markets were mostly moving in sync prior to COVID lockdowns.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Statewide restrictions saw most businesses and factories close. There was a shift to working and schooling from home where possible\")\r\n            }\r\n            else if (storyStep === 3) {\r\n                return (\"The markets reached parity with each other again two months after the strict lockdown ended.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"Across the electricity network there is a net consumption decrease of around -4% from the previous year. This is a significant change in the context of electricity demand. especially as 2020 was colder than 2019.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"The first lockdown saw an extreme low in April, while the second lockdown sees a similar low in August.\")\r\n            }\r\n            else if (storyStep === 3) {\r\n                return (\"We can see a slow returs to normal as restrictions ease over time. This is in contrast to the immediate changes when restrictions were implemented at short notice.\")\r\n            }\r\n        }\r\n\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"During the first lockdown the similar restrictions between regions saw the different market types following similar growth or decline.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"During the second lockdown regional businesses remained open unlike their metropolitan counterparts. Tourism however was virtually non-existant during this period in Regional Victoria.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"Lockdown restrictions saw Victoria split into two distinct regions with differing rules.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Regional Victoria had significantly fewer restrictions during Lockdown 2.\")\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"RawYearComparison\") {\r\n        if (marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"From this we can see that Residential consumption is far more sensitive to temperature than business or industrial consumption. The latter two market types remain relativley stable throughout the year.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"It's a little tough to interpret the change between 2019 and 2020 when viewed like this. Let's look only at the difference between the years on the next visual.\")\r\n            }\r\n        }\r\n        else if (!marketFilter) {\r\n            if (storyStep === 1) {\r\n                return (\"In a typical year Victoria generates approximately 26 million Megawatt-Hours (MWh) of electricity.\")\r\n            }\r\n            else if (storyStep === 2) {\r\n                return (\"Generation is distributed across the year with peaks occuring during the hottest and coldest months.\")\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"Calendar\") {\r\n        if (storyStep === 1) {\r\n            return (\"This calendar shows the consumption each day over a two year period. Click on some of the public holidays below to investigate the year on year change in a little more detail.\")\r\n        }\r\n        else if (storyStep === 2) {\r\n            return (\"Public holidays during the lockdown period exhibited significantly more overall consumption. Nearly all of which is from the residential sector.\")\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport function IntroStoryTitle(storyStep: number, setting: SettingChoices) {\r\n    return (`Test Title ${String.fromCodePoint(0x1F354)}`)\r\n}\r\n\r\nexport function BubbleDirection(setting: SettingChoices, storyStep: number, mkFilter: boolean) {\r\n    if (setting === \"RawYearComparison\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.bottomAutoEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomRightEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topLeftEdge\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomCenter\r\n            }\r\n            else if (storyStep === 3) {\r\n                return DirectionalHint.bottomLeftEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topRightEdge\r\n            }\r\n            else if (storyStep === 3) {\r\n                return DirectionalHint.leftCenter\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topLeftEdge\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.bottomLeftEdge\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n            else if (storyStep === 2) {\r\n                return DirectionalHint.topCenter\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"Calendar\") {\r\n        if (storyStep === 1) {\r\n            return DirectionalHint.rightCenter\r\n        }\r\n        else if (storyStep === 2) {\r\n            return DirectionalHint.rightCenter\r\n        }\r\n    }\r\n    return DirectionalHint.topCenter\r\n}\r\n\r\nexport function AnchorPost(setting: SettingChoices, storyStep: number, mkFilter: boolean): CSSProperties {\r\n    let l: string = \"70\";\r\n    let t: string = \"50\";\r\n    if (setting === \"RawYearComparison\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"34\";\r\n                t = \"35\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"68\";\r\n                t = \"40\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"34\";\r\n                t = \"57\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"74\";\r\n                t = \"57\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYTotal\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30.5\";\r\n                t = \"50\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"36\";\r\n                t = \"65\";\r\n            }\r\n            else if (storyStep === 3) {\r\n                l = \"77\";\r\n                t = \"64\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30\";\r\n                t = \"48\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"40\";\r\n                t = \"63\";\r\n            }\r\n            else if (storyStep === 3) {\r\n                l = \"85\";\r\n                t = \"57\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"YoYMarketRegion\") {\r\n        if (!mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"29\";\r\n                t = \"47\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"75\";\r\n                t = \"65\";\r\n            }\r\n        }\r\n        else if (mkFilter) {\r\n            if (storyStep === 1) {\r\n                l = \"30\";\r\n                t = \"46\";\r\n            }\r\n            else if (storyStep === 2) {\r\n                l = \"75\";\r\n                t = \"59\";\r\n            }\r\n        }\r\n    }\r\n    else if (setting === \"Calendar\") {\r\n        if (storyStep === 1) {\r\n            l = \"75\";\r\n            t = \"30\";\r\n        }\r\n        else if (storyStep === 2) {\r\n            l = \"75\";\r\n            t = \"60\";\r\n        }\r\n    }\r\n    return ({ position: \"absolute\", left: `${l}vw`, top: `${t}vh` })\r\n}","import { Button, ButtonGroup, Checkbox, FormControlLabel, Grid, Tooltip } from '@material-ui/core';\r\nimport { AxisBottom, AxisLeft } from '@visx/axis';\r\nimport { GridColumns, GridRows } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { LegendItem, LegendLabel, LegendQuantile } from '@visx/legend';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from '@visx/scale';\r\nimport { Bar } from '@visx/shape';\r\nimport { timeDays, timeMonths, timeWeek, timeYear } from 'd3-time';\r\nimport { timeFormat } from 'd3-time-format';\r\nimport moment from 'moment';\r\nimport React, { CSSProperties, useState } from 'react';\r\nimport { LargeColor, Line2019Color, Line2020Color, ResidentialColor, SMEColor } from '../consts';\r\nimport { DailyChange, KeyDate } from '../Data/DataTypes';\r\nimport '../styles.css';\r\n\r\ninterface CalendarProps {\r\n    width: number,\r\n    height: number,\r\n    data: DailyChange[],\r\n    KeyDateData: KeyDate[],\r\n    setStoryLim: Function\r\n}\r\n\r\nexport function KeyDateCalendar(props: CalendarProps) {\r\n    const CELL_SIZE = 18;\r\n    const [activeDate, setActiveDate] = useState<string>(\"\")\r\n    const [activeDay, setActiveDay] = useState<string>(\"\")\r\n    const [selectedDayData, setselectedDayData] = useState<KeyDate[]>([])\r\n    const [KeyDate2019, setKeyDate2019] = useState<Date>();\r\n    const [showLockdownPeriod, setshowLockdownPeriod] = useState<boolean>(false);\r\n\r\n    const [xScale, setxScale] = useState<any>(undefined)\r\n    const [yScale, setyScale] = useState<any>(undefined)\r\n\r\n    const leftPad = 50;\r\n    const topPad = 30;\r\n    const graphCanvasHeight = 150;\r\n    const detailCanvasHeight = 500;\r\n    const detailCanvasWidth = 500;\r\n    const xAxisRange: [number, number] = [leftPad, detailCanvasWidth]\r\n    const yAxisRange: [number, number] = [detailCanvasHeight - topPad, topPad]\r\n\r\n    const marketColorScale = scaleOrdinal({\r\n        domain: [\"Residential\", \"Commercial\", \"Large\"],\r\n        range: ['#6c5efb', '#c998ff', '#a44afe'],\r\n    });\r\n\r\n    function pathMonth(t0: any) {\r\n        const d0 = t0.getDay();\r\n        const w0 = timeWeek.count(timeYear(t0), t0);\r\n        const t1 = new Date(t0.getFullYear(), t0.getMonth() + 1, 0);\r\n        const d1 = t1.getDay();\r\n        const w1 = timeWeek.count(timeYear(t1), t1);\r\n\r\n        return `\r\n            M${(w0 + 1) * CELL_SIZE},${d0 * CELL_SIZE}\r\n            H${w0 * CELL_SIZE} V${7 * CELL_SIZE}\r\n            H${w1 * CELL_SIZE} V${(d1 + 1) * CELL_SIZE}\r\n            H${(w1 + 1) * CELL_SIZE} V0\r\n            H${(w0 + 1) * CELL_SIZE}Z\r\n        `;\r\n    }\r\n\r\n    const formatDay = timeFormat('%Y-%m-%d');\r\n    const keyDateList = getKeyDates();\r\n\r\n    const colorScale = scaleQuantile({\r\n        domain: [65000, 150000],\r\n        // range: ['#d01c8b', '#f1b6da', '#f7f7f7', '#b8e186', '#4dac26'] // Pink to Green\r\n        range: ['#d7191c', '#fdae61', '#ffffbf', '#abd9e9', '#2c7bb6'] //Orange to blue\r\n    })\r\n\r\n    const L1Start = new Date(\"2020-03-20\")\r\n    const L1End = new Date(\"2020-05-10\")\r\n    const L2Start = new Date(\"2020-07-08\")\r\n    const L2End = new Date(\"2020-11-08\")\r\n    const marketTypes = ['Residential', 'Commercial', 'Large']\r\n\r\n    function updateDate(newDate: string) {\r\n        setActiveDate(newDate)\r\n        if (activeDay === \"\") { props.setStoryLim(2) }\r\n        let Data2020 = props.KeyDateData.filter((d: KeyDate) => { return (formatDay(d.Date) === newDate) })\r\n        let dayName = Data2020[0].DayName\r\n        setActiveDay(dayName)\r\n        let Data2019 = props.KeyDateData.filter((d: KeyDate) => { return (d.DayName === dayName) && (d.Year === 2019) })\r\n        setKeyDate2019(Data2020.concat(Data2019)[3].Date)\r\n        setselectedDayData(Data2020.concat(Data2019))\r\n\r\n        setxScale(() => scaleBand({ domain: marketTypes, range: xAxisRange }))\r\n        setyScale(() => scaleLinear<number>({ domain: [0, 50000], nice: true, range: yAxisRange }))\r\n    }\r\n\r\n    function getKeyDates() {\r\n        let dateArray = []\r\n        for (var key in props.KeyDateData) {\r\n            dateArray.push(formatDay(props.KeyDateData[key].Date))\r\n        }\r\n        return dateArray;\r\n    }\r\n\r\n    let rowStyle: CSSProperties = {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    }\r\n\r\n    const legendGlyphSize = 15\r\n\r\n    return (\r\n        <div>\r\n            <Grid container>\r\n                {[2019, 2020].map(year => {\r\n                    const firstDayOfYear = new Date(year, 0, 1);\r\n                    const lastDayOfYear = new Date(year + 1, 0, 1);\r\n                    const yearDays = timeDays(firstDayOfYear, lastDayOfYear);\r\n                    const yearMonths = timeMonths(firstDayOfYear, lastDayOfYear);\r\n\r\n                    return (\r\n                        <>\r\n                            <Grid item xs={12}>\r\n                                <svg width={props.width} height={graphCanvasHeight} key={`year-${year}`}>\r\n                                    <Group transform={`translate(${(props.width - CELL_SIZE * 70) / 2},0)`}>\r\n                                        <text transform={`translate(-6,${CELL_SIZE * 3.5})rotate(-90)`} fontFamily=\"sans-serif\" fontSize={15} textAnchor=\"middle\" >\r\n                                            {year}\r\n                                        </text>\r\n\r\n                                        <Group fill=\"none\" stroke=\"#ccc\">\r\n                                            {yearDays.map(day => {\r\n                                                const dayString = formatDay(day);\r\n                                                const value = props.data.filter((d: DailyChange) => { return dayString === formatDay(d.Date) })[0].Consumption\r\n                                                const rextX = timeWeek.count(timeYear(day), day) * CELL_SIZE\r\n                                                const rectY = day.getDay() * CELL_SIZE\r\n                                                let cellborder = \"#fffff\"\r\n                                                let cellstrokewidth = 1\r\n                                                let period = \"\"\r\n                                                if (day >= L1Start && day <= L1End) {\r\n                                                    cellborder = Line2019Color;\r\n                                                    cellstrokewidth = 2;\r\n                                                    period = \" (Lockdown 1)\";\r\n                                                }\r\n                                                else if (day >= L2Start && day <= L2End) {\r\n                                                    cellborder = Line2020Color;\r\n                                                    cellstrokewidth = 2;\r\n                                                    period = \" (Lockdown 2)\"\r\n                                                }\r\n                                                return (\r\n                                                    <>\r\n                                                        <Tooltip title={`${moment(dayString).format(\"dddd D MMMM YYYY\")}: ${value} MWh ${period}`} key={`${dayString}-Tooltip-box`}>\r\n                                                            <rect\r\n                                                                fill={colorScale(value)}\r\n                                                                width={CELL_SIZE}\r\n                                                                height={CELL_SIZE}\r\n                                                                x={rextX}\r\n                                                                y={rectY}\r\n                                                                key={`day-rect-${dayString}`}\r\n                                                                stroke={showLockdownPeriod ? cellborder : \"#fffff\"}\r\n                                                                strokeWidth={showLockdownPeriod ? cellstrokewidth : 1}\r\n                                                                className={\"daySquare\"}\r\n                                                            />\r\n                                                        </Tooltip>\r\n                                                    </>\r\n                                                )\r\n                                            })}\r\n                                        </Group>\r\n\r\n                                        <Group fill=\"none\" stroke=\"#000\" strokeWidth={4}>\r\n                                            {yearMonths.map(firstOfMonth => (\r\n                                                <path d={pathMonth(firstOfMonth)} key={`month-path-${formatDay(firstOfMonth)}-${year}`} />\r\n                                            ))}\r\n                                        </Group>\r\n                                    </Group>\r\n                                </svg>\r\n                            </Grid>\r\n                        </>\r\n                    )\r\n                })}\r\n\r\n                <Grid item xs={12}>\r\n                    <ButtonGroup size=\"small\">\r\n                        {props.KeyDateData.map(event => {\r\n                            if (event.Market === \"Residential\" && event.Date.getFullYear() === 2020) {\r\n                                return (\r\n                                    <Button variant={activeDate === formatDay(event.Date) ? \"contained\" : \"outlined\"} color=\"primary\" onClick={(e) => { updateDate(formatDay(event.Date)) }}>{event.DayName}</Button>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </ButtonGroup>\r\n                </Grid>\r\n\r\n                {activeDate !== \"\" &&\r\n                    <Grid item xs={4} style={rowStyle}>\r\n                        <text>{activeDay} 2019 - {moment(KeyDate2019).format(\"DD MMMM\")}</text>\r\n                        <svg width={detailCanvasWidth} height={detailCanvasHeight} id=\"Calendar2019Graphs\">\r\n                            <AxisBottom top={detailCanvasHeight - topPad} scale={xScale} />\r\n                            <AxisLeft left={leftPad} scale={yScale} />\r\n                            <GridRows scale={yScale} width={detailCanvasWidth - leftPad} height={detailCanvasHeight} stroke=\"#e0e0e0\" left={leftPad} />\r\n\r\n                            <Group id=\"2019Graph\">\r\n                                {selectedDayData.filter((d: KeyDate) => { return (d.Year === 2019) }).map((d: KeyDate) => {\r\n                                    const barHeight = detailCanvasHeight - yScale(d.Consumption);\r\n                                    const barX = xScale(d.Market);\r\n                                    const barY = detailCanvasHeight - barHeight;\r\n                                    let lineColor = ResidentialColor\r\n                                    if (d.Market === \"Commercial\") lineColor = SMEColor\r\n                                    else if (d.Market === \"Residential\") lineColor = ResidentialColor\r\n                                    else if (d.Market === \"Large\") lineColor = LargeColor\r\n                                    return (\r\n                                        <Bar\r\n                                            key={`bar-${d.Date}-${d.Market}-outline`}\r\n                                            x={barX + 50}\r\n                                            y={barY - topPad}\r\n                                            width={50}\r\n                                            height={barHeight}\r\n                                            fill={lineColor}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </Group>\r\n                        </svg>\r\n                    </Grid>\r\n                }\r\n                {activeDate !== \"\" &&\r\n                    <Grid item xs={4} style={rowStyle}>\r\n                        <text>{activeDay} 2020 - {moment(activeDate).format(\"DD MMMM\")}</text>\r\n\r\n                        <svg width={detailCanvasWidth} height={detailCanvasHeight} id=\"Calendar2020Graphs\">\r\n                            <AxisBottom top={detailCanvasHeight - topPad} scale={xScale} />\r\n                            <AxisLeft left={leftPad} scale={yScale} />\r\n                            <GridRows scale={yScale} width={detailCanvasWidth - leftPad} height={detailCanvasHeight} stroke=\"#e0e0e0\" left={leftPad} />\r\n\r\n                            <Group id=\"2019Graph\">\r\n                                {selectedDayData.filter((d: KeyDate) => { return (d.Year === 2020) }).map((d: KeyDate) => {\r\n                                    const barHeight = detailCanvasHeight - yScale(d.Consumption);\r\n                                    const barX = xScale(d.Market);\r\n                                    const barY = detailCanvasHeight - barHeight;\r\n                                    let lineColor = ResidentialColor\r\n                                    if (d.Market === \"Commercial\") lineColor = SMEColor\r\n                                    else if (d.Market === \"Residential\") lineColor = ResidentialColor\r\n                                    else if (d.Market === \"Large\") lineColor = LargeColor\r\n                                    return (\r\n                                        <Bar\r\n                                            key={`bar-${d.Date}-${d.Market}-outline`}\r\n                                            x={barX + 50}\r\n                                            y={barY - topPad}\r\n                                            width={50}\r\n                                            height={barHeight}\r\n                                            fill={lineColor}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </Group>\r\n                        </svg>\r\n                    </Grid>\r\n                }\r\n                <Group id=\"CalLegend\" style={{ position: 'fixed', right: '10%' }}>\r\n                    <span>Daily Consumption (MWh)</span>\r\n                    <LegendQuantile scale={colorScale}>\r\n                        {(labels: any) =>\r\n                            labels.reverse().map((label: any, i: number) => (\r\n                                <LegendItem key={`legend-${i}`} >\r\n                                    <svg width={legendGlyphSize} height={legendGlyphSize} style={{ margin: '2px 0' }}>\r\n                                        <circle fill={label.value} r={legendGlyphSize / 2} cx={legendGlyphSize / 2} cy={legendGlyphSize / 2} />\r\n                                    </svg>\r\n                                    <LegendLabel align=\"left\" margin=\"0 4px\">\r\n                                        {label.index === 0 && `Below ${label.extent[1]}`}\r\n                                        {(label.index !== 0 && label.index !== 4) && `${Math.round(label.extent[0])} to ${Math.round(label.extent[1])}`}\r\n                                        {label.index === 4 && `Above ${label.extent[0]}`}\r\n                                    </LegendLabel>\r\n                                </LegendItem>\r\n                            ))\r\n                        }\r\n                    </LegendQuantile>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={showLockdownPeriod}\r\n                                onChange={(e) => { setshowLockdownPeriod(e.target.checked) }}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Show Lockdown Period\"\r\n                    />\r\n                </Group>\r\n            </Grid>\r\n\r\n        </div >\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { AxisBottom, AxisLeft, ComputedTick } from '@visx/axis';\r\nimport { Group } from \"@visx/group\";\r\nimport { Line } from \"@visx/shape\";\r\nimport moment from \"moment\";\r\nimport { scaleBand, scaleTime } from \"@visx/scale\";\r\nimport { Theme, Tooltip, withStyles } from \"@material-ui/core\";\r\nimport { BaseColor, Line2019Color, Line2020Color } from \"../consts\";\r\n\r\nconst tickLabelSize = 15;\r\nconst BigTooltip = withStyles((theme: Theme) => ({\r\n    tooltip: {\r\n        fontSize: \"0.8em\",\r\n    },\r\n}))(Tooltip);\r\n\r\nexport function TwoYearAxis(graphHeight: number, leftPad: number, graphWidth: number, xScale: any, yScale: any, yAxisLabel: string) {\r\n    return (\r\n        <>\r\n            <AxisBottom top={graphHeight} scale={xScale} numTicks={23} tickFormat={(d: any) => { return d }}>\r\n                {props => {\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            <Line from={props.axisFromPoint} to={props.axisToPoint} stroke={\"#000000\"} />\r\n                            {props.ticks.map((tick, i) => {\r\n                                if (i !== 24) {\r\n                                    const tickX = tick.to.x;\r\n                                    const tickY = tick.to.y + tickLabelSize;\r\n                                    return (\r\n                                        <Group key={`vx-tick-${tick.value}-${i}`} className={'vx-axis-tick'}>\r\n                                            <Line from={tick.from} to={tick.to} stroke={\"#000000\"} />\r\n                                            <text transform={`translate(${tickX}, ${tickY})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={moment(tick.formattedValue).format(\"Y\") === \"2019\" ? '#4760DE' : \"#A62190\"} >\r\n                                                {moment(tick.formattedValue).format(\"MMM\")}\r\n                                            </text>\r\n                                        </Group>\r\n                                    );\r\n                                }\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n            <AxisBottom top={graphHeight + 30} scale={scaleBand({ domain: [\"2019\", \"2020\"], range: [leftPad, graphWidth] })} numTicks={4} hideAxisLine tickFormat={(d: any) => { return moment(d).format(\"Y\") }} >\r\n                {props => {\r\n                    const tickLabelSize = 10;\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            {props.ticks.map((tick, i) => {\r\n                                const tickX = tick.to.x;\r\n                                const tickY = tick.to.y + tickLabelSize;\r\n                                return (\r\n                                    <Group key={`vx-tick-${tick.value}-${i}`} className={'vx-axis-tick'}>\r\n                                        <text transform={`translate(${tickX}, ${tickY})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={tick.formattedValue === \"2019\" ? Line2019Color : Line2020Color} >\r\n                                            {tick.formattedValue}\r\n                                        </text>\r\n                                    </Group>\r\n                                );\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n\r\n            <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} labelClassName={\"axisLabelTY\"} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport function OneYearAxis(graphHeight: number, leftPad: number, graphWidth: number, xScale: any, yScale: any, yAxisLabel: string) {\r\n    return (\r\n        <>\r\n            <AxisBottom top={graphHeight} scale={xScale} numTicks={12} tickFormat={(d: any) => { return d }} >\r\n                {props => {\r\n                    const axisCenter = (props.axisToPoint.x - props.axisFromPoint.x) / 2;\r\n                    return (\r\n                        <g className=\"my-custom-bottom-axis\">\r\n                            <Line from={props.axisFromPoint} to={props.axisToPoint} stroke={\"#000000\"} />\r\n                            {props.ticks.map((tick, i) => {\r\n                                return monthTicks(tick)\r\n                            })}\r\n                            <text textAnchor=\"middle\" transform={`translate(${axisCenter}, 50)`} fontSize=\"8\" >\r\n                                {props.label}\r\n                            </text>\r\n                        </g>\r\n                    );\r\n                }}\r\n            </AxisBottom>\r\n            <AxisBottom top={graphHeight + 30} scale={scaleTime<number>({ domain: [new Date(\"2019-01-01\"), new Date(\"2020-12-01\")], nice: true, range: [leftPad, graphWidth] })} numTicks={1} hideAxisLine tickFormat={(d: any) => { return moment(d).format(\"Y\") }} hideTicks />\r\n\r\n            <AxisLeft left={leftPad} scale={yScale} label={yAxisLabel} labelClassName={\"axisLabelOY\"} />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction monthTicks(tick: ComputedTick<any>) {\r\n    let tooltipText = \"Prior to Lockdown\"\r\n    let tickColor = BaseColor\r\n\r\n    let currMonth = moment(tick.formattedValue).format(\"MMMM\")\r\n    if ([\"April\", \"May\"].includes(currMonth)) {\r\n        tooltipText = \"Lockdown 1\"\r\n        tickColor = Line2019Color\r\n    }\r\n    else if ([\"July\", \"August\", \"September\", \"October\"].includes(currMonth)) {\r\n        tooltipText = \"Lockdown 2\"\r\n        tickColor = Line2020Color\r\n    }\r\n    else if ([\"January\", \"February\"].includes(currMonth)) {\r\n        tooltipText = \"Prior to Lockdown\"\r\n        tickColor = BaseColor\r\n    }\r\n    else if (currMonth === \"March\") {\r\n        tooltipText = \"Lockdown begins in Third Week\"\r\n        tickColor = Line2019Color\r\n    }\r\n    else if (currMonth === \"June\") {\r\n        tooltipText = \"Eased Restrictions\"\r\n        tickColor = BaseColor\r\n    }\r\n    else if ([\"November\", \"December\"].includes(currMonth)) {\r\n        tooltipText = \"Easing Restrictions Over Time\"\r\n        tickColor = BaseColor\r\n    }\r\n\r\n    return (\r\n        <Group key={`vx-tick-${tick.value}`}>\r\n            <Line from={tick.from} to={tick.to} stroke={\"#000000\"} />\r\n            <BigTooltip title={tooltipText} className={\"largerTooltip\"}>\r\n                <text transform={`translate(${tick.to.x}, ${tick.to.y + tickLabelSize})`} fontSize={tickLabelSize} textAnchor=\"middle\" fill={tickColor} cursor={'pointer'}>\r\n                    {moment(tick.formattedValue).format(\"MMMM\")}\r\n                </text>\r\n            </BigTooltip>\r\n        </Group>\r\n    );\r\n}","\r\nexport function Intro() {\r\n    return (\r\n        <div style={{ height: \"90vh\", width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <div dangerouslySetInnerHTML={{ __html: \"<iframe src='https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1n-8-FkqEqL-hZbaXNfr5ApCmQKAhRsdSjKSMdV5JNKQ&font=Default&lang=en&timenav_position=top&initial_zoom=1&height=650' width='100%' height='650' webkitallowfullscreen mozallowfullscreen allowfullscreen frameborder='0'></iframe>\"}} />\r\n        </div>\r\n    )\r\n}\r\n","import { Button, Card } from \"@material-ui/core\";\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport { LegendItem, LegendLabel, LegendOrdinal } from '@visx/legend';\r\nimport { scaleOrdinal } from \"@visx/scale\";\r\nimport React from \"react\";\r\nimport { LargeColor, ResidentialColor, SettingChoices, SMEColor } from \"../consts\";\r\n\r\nexport function CustomLegend(props: { currStep: SettingChoices, marketsActive: boolean, updateFilters: Function }) {\r\n    function legendScale(setting: SettingChoices): any {\r\n        if (setting === \"RawYearComparison\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYTotal\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential\", \"Business\", \"Industrial\"],\r\n                    range: [ResidentialColor, SMEColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            return (\r\n                scaleOrdinal({\r\n                    domain: [\"Residential Metropolitan\", \"Residential Regional\", \"Business Metropolitan\", \"Business Regional\", \"Industrial Metropolitan\", \"Industrial Regional\"],\r\n                    range: [ResidentialColor, ResidentialColor, SMEColor, SMEColor, LargeColor, LargeColor],\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    function legendIcon(setting: SettingChoices, color: string, label: string, lineDash = false) {\r\n        if (setting === \"YoYTotal\" || setting === \"RawYearComparison\") {\r\n            if (label === \"Residential\") { return (<HomeIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Business\") { return (<StoreIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Industrial\") { return (<BusinessIcon htmlColor={color} fontSize={'large'} />) }\r\n            else if (label === \"Overall\") { return (<MoreHorizIcon htmlColor={color} fontSize={'large'} />) }\r\n        }\r\n        else {\r\n            if (label.includes(\"Regional\")) {\r\n                return (<svg width={25} height={25}> <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" stroke={color} stroke-dasharray=\"4\" /> </svg>)\r\n            }\r\n            else {\r\n                return (<svg width={25} height={25}> <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" stroke={color} /> </svg>)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    if (!legendScale(props.currStep) || props.currStep === \"Intro\") {\r\n        return null;\r\n    }\r\n    else if (!props.marketsActive) {\r\n        return (\r\n            <Card style={{ zIndex: 1, position: 'fixed', top: \"15vh\", right: \"10vw\" }}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={(e) => { props.updateFilters() }} style={{ marginTop: \"5%\" }}> Show Market Types </Button>\r\n            </Card>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Card style={{ zIndex: 1, position: 'fixed', top: \"15vh\", right: \"10vw\" }}>\r\n                <LegendOrdinal scale={legendScale(props.currStep)} labelFormat={(label: any) => `${label}`}>\r\n                    {labels => (\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            {labels.map((label, i) => (\r\n                                <LegendItem key={`legend-quantile-${i}`} margin=\"5px 5px\" >\r\n                                    {legendIcon(props.currStep, label.value, label.text)}\r\n                                    <LegendLabel align=\"left\" margin=\"0 0 0 4px\"> {label.text} </LegendLabel>\r\n                                </LegendItem>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </LegendOrdinal>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n","import { Divider } from '@material-ui/core';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Group } from '@visx/group';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingChoices, StepList, StepTranslations } from '../consts';\r\nimport { getStepNumber } from '../Data/StoryFunctions';\r\n\r\nexport default function SideBar(props: { currStep: SettingChoices, updateStep: Function, updateFilters: Function }) {\r\n    const [activeStep, setActiveStep] = useState<SettingChoices>(props.currStep);\r\n    const steps = StepList;\r\n\r\n    useEffect(() => {\r\n        if (props.currStep !== activeStep) {\r\n            setActiveStep(props.currStep);\r\n        }\r\n    })\r\n\r\n    const handleClick: any = (chosenLabel: SettingChoices) => {\r\n        setActiveStep(chosenLabel)\r\n        props.updateStep(chosenLabel);\r\n    }\r\n\r\n\r\n    return (\r\n        <Group id=\"SideBar\" style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <Group id=\"Stepper\">\r\n                <Stepper activeStep={getStepNumber(activeStep)} orientation=\"vertical\">\r\n                    {steps.map((label, index) => (\r\n                        <Step key={label} style={{ cursor: \"pointer\" }}>\r\n                            <StepLabel onClick={(e) => { handleClick(label) }}><Typography variant=\"button\">{StepTranslations[label]}</Typography></StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n            </Group>\r\n            <Divider />\r\n        </Group>\r\n    );\r\n}\r\n","import { Coachmark, TeachingBubbleContent } from '@fluentui/react';\r\nimport { useBoolean } from '@fluentui/react-hooks';\r\nimport { Link } from '@material-ui/core';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Fab, Grid, Tooltip, Typography } from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport { curveCardinal } from '@visx/curve';\r\nimport { GridColumns, GridRows } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { scaleLinear, scaleTime } from '@visx/scale';\r\nimport { Line, LinePath } from '@visx/shape';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Motion, spring } from 'react-motion';\r\nimport { BaseColor, DataFilters, LargeColor, ResidentialColor, SettingChoices, SMEColor, StepOrder, StoryLims } from \"../consts\";\r\nimport { getDailyChangeData, getKeyDateData, getRawYearData, getRawYearMarketsData, getYoYMarketData, getYoYMarketRegionData, getYoYRegionData, getYoYTotalData } from '../Data/DataFunctions';\r\nimport { DailyChange, KeyDate, RawYearComparison, RawYearMarkets, YoYMarket, YoYMarketRegion, YoYRegion, YoYTotal } from '../Data/DataTypes';\r\nimport { AnchorPost, BubbleDirection, getStepNumber, StoryToolTipText } from '../Data/StoryFunctions';\r\nimport '../styles.css';\r\nimport { KeyDateCalendar } from './Calendar';\r\nimport { OneYearAxis, TwoYearAxis } from './CustomAxis';\r\nimport { Intro } from './Intro';\r\nimport { CustomLegend } from './Legend';\r\nimport SideBar from './SideBar';\r\n\r\n\r\nexport function MainGraph() {\r\n    const [xScale, setxScale] = useState<any>(undefined)\r\n    const [yScale, setyScale] = useState<any>(undefined)\r\n    const [CurrentStep, SetCurrentStep] = useState<SettingChoices>(\"YoYTotal\")\r\n    const [yAxisLabel, setyLabel] = useState<string>(\"\")\r\n    const [showDialog, setShowDialog] = useState<boolean>(false);\r\n\r\n    const [RawConsumption, SetRawConsumption] = useState<RawYearComparison[]>([])\r\n    const [RawConsumptionMarkets, SetRawConsumptionMarkets] = useState<RawYearMarkets[]>([])\r\n    const [YoYData, SetYoYData] = useState<YoYTotal[]>([])\r\n    const [YoYMarketData, SetYoYMarketData] = useState<YoYMarket[]>([])\r\n    const [YoYRegionData, SetYoYRegionData] = useState<YoYRegion[]>([])\r\n    const [YoYMarketRegionData, SetYoYMarketRegionData] = useState<YoYMarketRegion[]>([])\r\n    const [DailyChangeData, SetDailyChangeData] = useState<DailyChange[]>([])\r\n    const [KeyDateData, SetKeyDateData] = useState<KeyDate[]>([])\r\n    const [StepReset, setStepReset] = useState<Boolean>(false)\r\n\r\n    const [ActiveFilters, SetFilters] = useState<DataFilters[]>([])\r\n\r\n    const canvasHeight = document.documentElement.clientHeight * 0.90;\r\n    const canvasWidth = document.documentElement.clientWidth * 0.80;\r\n    const graphHeight = document.documentElement.clientHeight * 0.80;\r\n    const graphWidth = document.documentElement.clientWidth * 0.75;\r\n    const leftPad = document.documentElement.clientWidth * 0.05;\r\n\r\n    //Story Variables\r\n    const [storyStep, setStoryStep] = useState<number>(1)\r\n    const [CurrStoryLimit, SetStorylim] = useState<number>(StoryLims[\"Intro\"])\r\n    const [ChartTitle, setTitle] = useState<string>(\"Total Consumption\")\r\n\r\n    // Ref targets\r\n    const PointOne = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark1Visible, { setFalse: hideCoachmark1, setTrue: showCoachmark1 }] = useBoolean(false);\r\n    const PointTwo = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark2Visible, { setFalse: hideCoachmark2, setTrue: showCoachmark2 }] = useBoolean(false);\r\n    const PointThree = React.useRef<HTMLDivElement>(null);\r\n    const [isCoachmark3Visible, { setFalse: hideCoachmark3, setTrue: showCoachmark3 }] = useBoolean(false);\r\n\r\n    // Step Functions\r\n    function handleStep() {\r\n        if (CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\") && !showDialog) {\r\n            setShowDialog(true)\r\n            hideCoachmark1();\r\n            hideCoachmark2();\r\n            hideCoachmark3();\r\n        }\r\n        else if (CurrentStep !== \"Calendar\") {\r\n            setStepandScale(StepOrder[getStepNumber(CurrentStep) + 1])\r\n        }\r\n    }\r\n\r\n    // Tooltip positioning\r\n    function getTTPos(s: number) {\r\n        return (\r\n            {\r\n                directionalHint: BubbleDirection(CurrentStep, s, ActiveFilters.includes(\"Markets\")),\r\n                doNotLayer: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    // Set Filters\r\n    function updateFilters(newFilter: DataFilters, reset = false) {\r\n        if (reset) {\r\n            SetFilters([])\r\n        }\r\n        else {\r\n            setStepReset(true)\r\n            SetFilters([newFilter])\r\n            setTitle(detTitle(CurrentStep, true))\r\n        }\r\n    }\r\n\r\n    function activateMTFilter() {\r\n        hideCoachmark1()\r\n        hideCoachmark2()\r\n        hideCoachmark3()\r\n        updateFilters(\"Markets\")\r\n    }\r\n\r\n    function handleDialogClose() {\r\n        handleStep();\r\n        setShowDialog(false);\r\n    };\r\n\r\n    // Axis Functions\r\n    function setDateValueScale(minDate: number, maxDate: number, minVal: number, maxVal: number) {\r\n        setxScale(() => scaleTime<number>({ domain: [minDate, maxDate], nice: true, range: [leftPad, graphWidth] }))\r\n        setyScale(() => scaleLinear<number>({ domain: [maxVal, minVal], nice: true, range: [50, graphHeight] }))\r\n    }\r\n\r\n    function setStepandScale(newStep: SettingChoices) {\r\n        SetCurrentStep(newStep);\r\n        hideCoachmark1();\r\n        hideCoachmark2();\r\n        hideCoachmark3();\r\n        setStepReset(true)\r\n        updateFilters(\"2019\", false)\r\n        setTitle(detTitle(newStep))\r\n        SetStorylim(StoryLims[newStep])\r\n        if (newStep === \"RawYearComparison\") {\r\n            let minDate = Math.min(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...RawConsumption.map((d) => { return d.Month.valueOf() }))\r\n            let maxVal = Math.max(...RawConsumption.map((d) => { return d.Consumption }))\r\n            setDateValueScale(minDate, maxDate, 0, maxVal)\r\n            setyLabel(\"Demand (MWh)\")\r\n        }\r\n        else if (newStep === \"YoYTotal\") {\r\n            let minDate = Math.min(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketData.map((d) => { return d.YoYChange }))\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n            setyLabel(\"Year on Year Change (%)\")\r\n        }\r\n        else if (newStep === \"YoYMarketRegion\") {\r\n            let minDate = Math.min(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let maxDate = Math.max(...YoYMarketRegionData.map((d) => { return d.Month.valueOf() }))\r\n            let minVal = Math.min(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            let maxVal = Math.max(...YoYMarketRegionData.map((d) => { return d.YoYChange }))\r\n            setyLabel(\"Year on Year Change (%)\")\r\n            setDateValueScale(minDate, maxDate, minVal, maxVal)\r\n        }\r\n        else if (newStep === \"Intro\") {\r\n\r\n        }\r\n        if (newStep !== CurrentStep) {\r\n            setStoryStep(1);\r\n        }\r\n    }\r\n\r\n    function detTitle(setting: SettingChoices, marketFilter = false): string {\r\n        if (setting === \"YoYTotal\") {\r\n            if (marketFilter) {\r\n                return \"Electricity Demand across Victoria by Market Type\"\r\n            }\r\n            else {\r\n                return \"Electricity Demand across Victoria\"\r\n            }\r\n        }\r\n        else if (setting === \"RawYearComparison\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Market Type\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand\"\r\n            }\r\n        }\r\n        else if (setting === \"YoYMarketRegion\") {\r\n            if (marketFilter) {\r\n                return \"Year on Year Change in Demand by Region\"\r\n            }\r\n            else {\r\n                return \"Year on Year Change in Demand by Region and Market Type\"\r\n            }\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (RawConsumption.length === 0) {\r\n            console.log(\"Loading Data\")\r\n            getRawYearData(SetRawConsumption);\r\n            getRawYearMarketsData(SetRawConsumptionMarkets);\r\n            getYoYTotalData(SetYoYData);\r\n            getYoYMarketData(SetYoYMarketData)\r\n            getYoYRegionData(SetYoYRegionData)\r\n            getYoYMarketRegionData(SetYoYMarketRegionData)\r\n            getDailyChangeData(SetDailyChangeData)\r\n            getKeyDateData(SetKeyDateData)\r\n        }\r\n        else if (xScale === undefined && storyStep === 1 && CurrentStep !== \"Intro\") {\r\n            console.log(\"Data Loaded\")\r\n            setStepandScale(\"Intro\")\r\n        }\r\n        if (!isCoachmark1Visible && StepReset) {\r\n            showCoachmark1()\r\n            showCoachmark2()\r\n            showCoachmark3()\r\n            setStepReset(false)\r\n        }\r\n    })\r\n\r\n    let xAxisSlide: any = (x: number, visible: boolean) => {\r\n        return (\r\n            {\r\n                WebkitTransform: `translate3d(${x}px, 0, 0)`,\r\n                transform: `translate3d(${x}px, 0, 0)`,\r\n                visibility: (visible ? 'visible' : 'hidden')\r\n            }\r\n        )\r\n    }\r\n\r\n    const leftColStyle = {\r\n        borderRight: '1px solid rgba(0, 0, 0, 0.05)'\r\n    }\r\n\r\n    const lineOpacity = ActiveFilters.includes(\"Markets\") ? 0 : 1\r\n\r\n    return (\r\n        <Grid container>\r\n            <Group id=\"anchors\">\r\n                <span id=\"InfoAnchor1\" style={AnchorPost(CurrentStep, 1, ActiveFilters.includes(\"Markets\"))} ref={PointOne} />\r\n                <span id=\"InfoAnchor2\" style={AnchorPost(CurrentStep, 2, ActiveFilters.includes(\"Markets\"))} ref={PointTwo} />\r\n                <span id=\"InfoAnchor3\" style={AnchorPost(CurrentStep, 3, ActiveFilters.includes(\"Markets\"))} ref={PointThree} />\r\n            </Group>\r\n\r\n            <Group id=\"LegendContainer\">\r\n                <CustomLegend currStep={CurrentStep} marketsActive={ActiveFilters.includes(\"Markets\")} updateFilters={activateMTFilter} />\r\n            </Group>\r\n\r\n            <Group id=\"infoBoxes\">\r\n                {(CurrentStep !== \"Intro\") && (\r\n                    <>\r\n                        {(CurrStoryLimit >= 1 && isCoachmark1Visible) && (\r\n                            <Coachmark target={PointOne.current} positioningContainerProps={getTTPos(1)} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark1} hasCloseButton>\r\n                                    {StoryToolTipText(1, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n\r\n                        {(CurrStoryLimit >= 2 && isCoachmark2Visible) && (\r\n                            <Coachmark target={PointTwo.current} positioningContainerProps={getTTPos(2)} delayBeforeCoachmarkAnimation={1000} >\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark2} hasCloseButton>\r\n                                    {StoryToolTipText(2, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                        {(CurrStoryLimit >= 3 && isCoachmark3Visible) && (\r\n                            <Coachmark target={PointThree.current} positioningContainerProps={getTTPos(3)} delayBeforeCoachmarkAnimation={1000}>\r\n                                <TeachingBubbleContent onDismiss={hideCoachmark3} hasCloseButton>\r\n                                    {StoryToolTipText(3, CurrentStep, ActiveFilters.includes(\"Markets\"))}\r\n                                </TeachingBubbleContent>\r\n                            </Coachmark>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </Group>\r\n\r\n            <Grid item xs={2} style={leftColStyle}>\r\n                <SideBar currStep={CurrentStep} updateStep={setStepandScale} updateFilters={activateMTFilter} />\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n                {CurrentStep === \"Intro\" && <Intro />}\r\n\r\n                {(CurrentStep !== \"Intro\" && CurrentStep !== \"Calendar\" && xScale) &&\r\n                    <Group id=\"CanvasContainer\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n                        <Typography variant=\"h6\">{ChartTitle}</Typography>\r\n                        <svg height={canvasHeight} width={canvasWidth} id=\"Canvas\">\r\n\r\n                            <Group id=\"Axis\">\r\n                                {CurrentStep !== \"RawYearComparison\" ? OneYearAxis(graphHeight, leftPad, graphWidth, xScale, yScale, yAxisLabel) : TwoYearAxis(graphHeight, leftPad, graphWidth, xScale, yScale, yAxisLabel)}\r\n                                <GridRows scale={yScale} width={graphWidth - leftPad} height={graphHeight} stroke=\"#e0e0e0\" left={leftPad} />\r\n                                <GridColumns scale={xScale} width={graphWidth} height={graphHeight - 50} stroke=\"#e0e0e0\" top={50} />\r\n                            </Group>\r\n\r\n                            {/* Total Consumption Lines */}\r\n                            <Group id={\"TotalConsumpion\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <LinePath\r\n                                            data={RawConsumption}\r\n                                            curve={curveCardinal}\r\n                                            x={d => xScale(d.Month.valueOf())}\r\n                                            y={d => yScale(d.Consumption)}\r\n                                            stroke={BaseColor}\r\n                                            strokeWidth={1.5}\r\n                                            style={xAxisSlide(motionVar, (CurrentStep === \"RawYearComparison\"))}\r\n                                            className={\"lineStyle\"}\r\n                                        />}\r\n                                </Motion>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"RawYearComparison\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"RawYearMarkets\">\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={RawConsumptionMarkets.filter((d: RawYearMarkets) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.Consumption)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY & YoYMarket Lines */}\r\n                            <Group id={\"YoYChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group>\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))} />\r\n                                            <LinePath\r\n                                                data={YoYData}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYTotal\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYTotal\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeMarkets\">\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Commercial\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Large\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketData.filter((d: YoYMarket) => { return d.Market === \"Residential\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n\r\n                            {/* YoY Region and Yoy Market+Region Lines */}\r\n                            <Group id={\"YoYRegionChange\"}>\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\") ? 0 : 400) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoYChangeRegion\">\r\n                                            <Line from={{ x: xScale(new Date(2020, 0, 1)), y: yScale(0) }} to={{ x: graphWidth, y: yScale(0) }} stroke={BaseColor} strokeWidth={1.5} style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))} />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Regional\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYRegionData.filter((d: YoYRegion) => { return d.Region === \"Metropolitan\" })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={BaseColor}\r\n                                                strokeWidth={1.5}\r\n                                                style={xAxisSlide(motionVar, (CurrentStep === \"YoYMarketRegion\"))}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={lineOpacity}\r\n                                            />\r\n\r\n                                        </Group>}\r\n                                </Motion>\r\n\r\n                                <Motion style={{ motionVar: spring((CurrentStep === \"YoYMarketRegion\" && ActiveFilters.includes(\"Markets\")) ? 1 : 0) }}>\r\n                                    {({ motionVar }) =>\r\n                                        <Group id=\"YoyChangeMarketRegions\">\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Metropolitan\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Commercial\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={SMEColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                className={\"lineStyle\"}\r\n                                                opacity={motionVar}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Large\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={LargeColor}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                strokeWidth={1.5}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                            <LinePath\r\n                                                data={YoYMarketRegionData.filter((d: YoYMarketRegion) => { return (d.Market === \"Residential\" && d.Region === \"Regional\") })}\r\n                                                curve={curveCardinal}\r\n                                                x={d => xScale(d.Month.valueOf())}\r\n                                                y={d => yScale(d.YoYChange)}\r\n                                                stroke={ResidentialColor}\r\n                                                strokeWidth={1.5}\r\n                                                strokeDasharray={\"5, 3\"}\r\n                                                opacity={motionVar}\r\n                                                className={\"lineStyle\"}\r\n                                            />\r\n                                        </Group>\r\n                                    }\r\n                                </Motion>\r\n                            </Group>\r\n                        </svg>\r\n                    </Group>\r\n                }\r\n                {CurrentStep === \"Calendar\" &&\r\n                    <Group id=\"CalendarGroup\">\r\n                        <KeyDateCalendar data={DailyChangeData} width={graphWidth} height={graphHeight} KeyDateData={KeyDateData} setStoryLim={SetStorylim} />\r\n                    </Group>\r\n                }\r\n            </Grid>\r\n\r\n            <Group id=\"NavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', top: \"50%\", right: \"0%\" }}>\r\n                {(CurrentStep !== \"Calendar\" && ActiveFilters.includes(\"Markets\")) &&\r\n                    <Fab color=\"primary\" onClick={(e) => handleStep()}>\r\n                        <NavigateNextIcon />\r\n                    </Fab>\r\n                }\r\n                {(CurrentStep !== \"Calendar\" && CurrentStep !== \"Intro\" && !ActiveFilters.includes(\"Markets\")) &&\r\n                    <Tooltip title=\"Show Market Types to Continue\">\r\n                        <Fab onClick={(e) => activateMTFilter()}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                }\r\n            </Group>\r\n            <Group id=\"IntroNavButton\" style={{ display: \"flex\", alignItems: \"center\", position: 'absolute', bottom: \"0%\", right: \"0%\", flexDirection: 'column' }} className={\"introNavButton\"}>\r\n                {(CurrentStep === \"Intro\") &&\r\n                    <>\r\n                        <Fab color=\"primary\" onClick={(e) => handleStep()}>\r\n                            <NavigateNextIcon />\r\n                        </Fab>\r\n                        <Typography variant=\"button\">Next Visual</Typography>\r\n                    </>\r\n                }\r\n            </Group>\r\n\r\n            <Dialog\r\n                open={showDialog}\r\n                onClose={handleDialogClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">Thanks for Reading</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        The analysis done on this website has been a part of research into COVID-19 and electricity consumer trends for my university thesis. Part of this analysis involves evaluating the visuals shown thus far.\r\n                    </DialogContentText>\r\n                    <DialogContentText>\r\n                        Below is a link to a very short anonymous survey about your experience with this site. It would greatly benefit my research into energy and visualisation if you could take the time to fill it in before moving on.\r\n                    </DialogContentText>\r\n                    <DialogContentText>\r\n                        <Link href=\"https://forms.gle/Mo5EbTSWKYZWAcBM8\" >Survey Link</Link>\r\n                    </DialogContentText>\r\n                    <DialogContentText>\r\n                        For more information about this research please do not hesitate to reach out to me at sche259@student.monash.edu\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDialogClose} color=\"primary\" autoFocus>\r\n                        Final Visual\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Grid >\r\n    )\r\n}","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <AppBar position=\"static\" style={{ marginBottom: \"1vh\" }}>\r\n            <Toolbar>\r\n                <Typography variant=\"h5\">Visualising the Effects of COVID-19 on the Electricity Grid in Victoria, Australia</Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport { MainGraph } from './MainApp/Graph';\nimport NavBar from './MainApp/NavBar';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <NavBar />\n      <MainGraph />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\ninitializeIcons()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}